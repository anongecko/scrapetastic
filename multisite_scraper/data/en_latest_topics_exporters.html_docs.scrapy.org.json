{
  "url": "https://docs.scrapy.org/en/latest/topics/exporters.html",
  "title": "Item Exporters — Scrapy 2.11.2 documentation",
  "content": [
    {
      "type": "text",
      "content": "First steps"
    },
    {
      "type": "text",
      "content": "Scrapy at a glance"
    },
    {
      "type": "text",
      "content": "Installation guide"
    },
    {
      "type": "text",
      "content": "Scrapy Tutorial"
    },
    {
      "type": "text",
      "content": "Examples"
    },
    {
      "type": "text",
      "content": "Basic concepts"
    },
    {
      "type": "text",
      "content": "Command line tool"
    },
    {
      "type": "text",
      "content": "Spiders"
    },
    {
      "type": "text",
      "content": "Selectors"
    },
    {
      "type": "text",
      "content": "Items"
    },
    {
      "type": "text",
      "content": "Item Loaders"
    },
    {
      "type": "text",
      "content": "Scrapy shell"
    },
    {
      "type": "text",
      "content": "Item Pipeline"
    },
    {
      "type": "text",
      "content": "Feed exports"
    },
    {
      "type": "text",
      "content": "Requests and Responses"
    },
    {
      "type": "text",
      "content": "Link Extractors"
    },
    {
      "type": "text",
      "content": "Settings"
    },
    {
      "type": "text",
      "content": "Exceptions"
    },
    {
      "type": "text",
      "content": "Built-in services"
    },
    {
      "type": "text",
      "content": "Logging"
    },
    {
      "type": "text",
      "content": "Stats Collection"
    },
    {
      "type": "text",
      "content": "Sending e-mail"
    },
    {
      "type": "text",
      "content": "Telnet Console"
    },
    {
      "type": "text",
      "content": "Solving specific problems"
    },
    {
      "type": "text",
      "content": "Frequently Asked Questions"
    },
    {
      "type": "text",
      "content": "Debugging Spiders"
    },
    {
      "type": "text",
      "content": "Spiders Contracts"
    },
    {
      "type": "text",
      "content": "Common Practices"
    },
    {
      "type": "text",
      "content": "Broad Crawls"
    },
    {
      "type": "text",
      "content": "Using your browser’s Developer Tools for scraping"
    },
    {
      "type": "text",
      "content": "Selecting dynamically-loaded content"
    },
    {
      "type": "text",
      "content": "Debugging memory leaks"
    },
    {
      "type": "text",
      "content": "Downloading and processing files and images"
    },
    {
      "type": "text",
      "content": "Deploying Spiders"
    },
    {
      "type": "text",
      "content": "AutoThrottle extension"
    },
    {
      "type": "text",
      "content": "Benchmarking"
    },
    {
      "type": "text",
      "content": "Jobs: pausing and resuming crawls"
    },
    {
      "type": "text",
      "content": "Coroutines"
    },
    {
      "type": "text",
      "content": "asyncio"
    },
    {
      "type": "text",
      "content": "Extending Scrapy"
    },
    {
      "type": "text",
      "content": "Architecture overview"
    },
    {
      "type": "text",
      "content": "Add-ons"
    },
    {
      "type": "text",
      "content": "Downloader Middleware"
    },
    {
      "type": "text",
      "content": "Spider Middleware"
    },
    {
      "type": "text",
      "content": "Extensions"
    },
    {
      "type": "text",
      "content": "Signals"
    },
    {
      "type": "text",
      "content": "Scheduler"
    },
    {
      "type": "text",
      "content": "Item Exporters"
    },
    {
      "type": "text",
      "content": "Using Item Exporters"
    },
    {
      "type": "text",
      "content": "Serialization of item fields"
    },
    {
      "type": "text",
      "content": "1. Declaring a serializer in the field"
    },
    {
      "type": "text",
      "content": "2. Overriding the serialize_field() method"
    },
    {
      "type": "text",
      "content": "Built-in Item Exporters reference"
    },
    {
      "type": "text",
      "content": "BaseItemExporter"
    },
    {
      "type": "text",
      "content": "PythonItemExporter"
    },
    {
      "type": "text",
      "content": "XmlItemExporter"
    },
    {
      "type": "text",
      "content": "CsvItemExporter"
    },
    {
      "type": "text",
      "content": "PickleItemExporter"
    },
    {
      "type": "text",
      "content": "PprintItemExporter"
    },
    {
      "type": "text",
      "content": "JsonItemExporter"
    },
    {
      "type": "text",
      "content": "JsonLinesItemExporter"
    },
    {
      "type": "text",
      "content": "MarshalItemExporter"
    },
    {
      "type": "text",
      "content": "Components"
    },
    {
      "type": "text",
      "content": "Core API"
    },
    {
      "type": "text",
      "content": "All the rest"
    },
    {
      "type": "text",
      "content": "Release notes"
    },
    {
      "type": "text",
      "content": "Contributing to Scrapy"
    },
    {
      "type": "text",
      "content": "Versioning and API stability"
    },
    {
      "type": "text",
      "content": " »"
    },
    {
      "type": "text",
      "content": "Item Exporters"
    },
    {
      "type": "text",
      "content": "\n              "
    },
    {
      "type": "text",
      "content": "Item Exporters"
    },
    {
      "type": "text",
      "content": "Once you have scraped your items, you often want to persist or export those\nitems, to use the data in some other application. That is, after all, the whole\npurpose of the scraping process."
    },
    {
      "type": "text",
      "content": "For this purpose Scrapy provides a collection of Item Exporters for different\noutput formats, such as XML, CSV or JSON."
    },
    {
      "type": "text",
      "content": "Using Item Exporters"
    },
    {
      "type": "text",
      "content": "If you are in a hurry, and just want to use an Item Exporter to output scraped\ndata see the "
    },
    {
      "type": "text",
      "content": "In order to use an Item Exporter, you  must instantiate it with its required\nargs. Each Item Exporter requires different arguments, so check each exporter\ndocumentation to be sure, in "
    },
    {
      "type": "text",
      "content": "1. call the method "
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">start_exporting()</span></code>"
    },
    {
      "type": "text",
      "content": "2. call the "
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">export_item()</span></code>"
    },
    {
      "type": "text",
      "content": "3. and finally call the "
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">finish_exporting()</span></code>"
    },
    {
      "type": "text",
      "content": "Here you can see an "
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">itemadapter</span> <span class=\"kn\">import</span> <span class=\"n\">ItemAdapter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scrapy.exporters</span> <span class=\"kn\">import</span> <span class=\"n\">XmlItemExporter</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PerYearXmlExportPipeline</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Distribute items across multiple XML files according to their 'year' field\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">open_spider</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">year_to_exporter</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">close_spider</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">exporter</span><span class=\"p\">,</span> <span class=\"n\">xml_file</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">year_to_exporter</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n            <span class=\"n\">exporter</span><span class=\"o\">.</span><span class=\"n\">finish_exporting</span><span class=\"p\">()</span>\n            <span class=\"n\">xml_file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_exporter_for_item</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"n\">adapter</span> <span class=\"o\">=</span> <span class=\"n\">ItemAdapter</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n        <span class=\"n\">year</span> <span class=\"o\">=</span> <span class=\"n\">adapter</span><span class=\"p\">[</span><span class=\"s2\">\"year\"</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">year</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">year_to_exporter</span><span class=\"p\">:</span>\n            <span class=\"n\">xml_file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">year</span><span class=\"si\">}</span><span class=\"s2\">.xml\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span>\n            <span class=\"n\">exporter</span> <span class=\"o\">=</span> <span class=\"n\">XmlItemExporter</span><span class=\"p\">(</span><span class=\"n\">xml_file</span><span class=\"p\">)</span>\n            <span class=\"n\">exporter</span><span class=\"o\">.</span><span class=\"n\">start_exporting</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">year_to_exporter</span><span class=\"p\">[</span><span class=\"n\">year</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">exporter</span><span class=\"p\">,</span> <span class=\"n\">xml_file</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">year_to_exporter</span><span class=\"p\">[</span><span class=\"n\">year</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_item</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"p\">):</span>\n        <span class=\"n\">exporter</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_exporter_for_item</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n        <span class=\"n\">exporter</span><span class=\"o\">.</span><span class=\"n\">export_item</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">item</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "Serialization of item fields"
    },
    {
      "type": "text",
      "content": "By default, the field values are passed unmodified to the underlying\nserialization library, and the decision of how to serialize them is delegated\nto each particular serialization library."
    },
    {
      "type": "text",
      "content": "However, you can customize how each field value is serialized "
    },
    {
      "type": "text",
      "content": "There are two ways to customize how a field will be serialized, which are\ndescribed next."
    },
    {
      "type": "text",
      "content": "1. Declaring a serializer in the field"
    },
    {
      "type": "text",
      "content": "If you use "
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Item</span></code>"
    },
    {
      "type": "text",
      "content": "Example:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">scrapy</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">serialize_price</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"$ </span><span class=\"si\">{</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Product</span><span class=\"p\">(</span><span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">Item</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">()</span>\n    <span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">serializer</span><span class=\"o\">=</span><span class=\"n\">serialize_price</span><span class=\"p\">)</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "2. Overriding the serialize_field() method"
    },
    {
      "type": "text",
      "content": "You can also override the "
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">serialize_field()</span></code>"
    },
    {
      "type": "text",
      "content": "Make sure you call the base class "
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">serialize_field()</span></code>"
    },
    {
      "type": "text",
      "content": "Example:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">scrapy.exporters</span> <span class=\"kn\">import</span> <span class=\"n\">XmlItemExporter</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ProductXmlExporter</span><span class=\"p\">(</span><span class=\"n\">XmlItemExporter</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">serialize_field</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"price\"</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"$ </span><span class=\"si\">{</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">serialize_field</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "Built-in Item Exporters reference"
    },
    {
      "type": "text",
      "content": "Here is a list of the Item Exporters bundled with Scrapy. Some of them contain\noutput examples, which assume you’re exporting these two items:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"n\">Item</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Color TV\"</span><span class=\"p\">,</span> <span class=\"n\">price</span><span class=\"o\">=</span><span class=\"s2\">\"1200\"</span><span class=\"p\">)</span>\n<span class=\"n\">Item</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"DVD player\"</span><span class=\"p\">,</span> <span class=\"n\">price</span><span class=\"o\">=</span><span class=\"s2\">\"200\"</span><span class=\"p\">)</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "BaseItemExporter"
    },
    {
      "type": "text",
      "content": "This is the (abstract) base class for all Item Exporters. It provides\nsupport for common features used by all (concrete) Item Exporters, such as\ndefining what fields to export, whether to export empty fields, or which\nencoding to use."
    },
    {
      "type": "text",
      "content": "These features can be configured through the "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">fields_to_export</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">export_empty_fields</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">encoding</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">indent</span></code>"
    },
    {
      "type": "text",
      "content": "New in version 2.0: "
    },
    {
      "type": "text",
      "content": "Exports the given item. This method must be implemented in subclasses."
    },
    {
      "type": "text",
      "content": "Return the serialized value for the given field. You can override this\nmethod (in your custom Item Exporters) if you want to control how a\nparticular field or value will be serialized/exported."
    },
    {
      "type": "text",
      "content": "By default, this method looks for a serializer "
    },
    {
      "type": "text",
      "content": "field"
    },
    {
      "type": "text",
      "content": "field"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dict</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dict</span></code>"
    },
    {
      "type": "text",
      "content": "name"
    },
    {
      "type": "text",
      "content": "name"
    },
    {
      "type": "text",
      "content": "value"
    },
    {
      "type": "text",
      "content": "value"
    },
    {
      "type": "text",
      "content": "Signal the beginning of the exporting process. Some exporters may use\nthis to generate some required header (for example, the\n"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">XmlItemExporter</span></code>"
    },
    {
      "type": "text",
      "content": "Signal the end of the exporting process. Some exporters may use this to\ngenerate some required footer (for example, the\n"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">XmlItemExporter</span></code>"
    },
    {
      "type": "text",
      "content": "Fields to export, their order "
    },
    {
      "type": "text",
      "content": "Possible values are:"
    },
    {
      "type": "text",
      "content": "None"
    },
    {
      "type": "text",
      "content": "None"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>"
    },
    {
      "type": "text",
      "content": "A list of fields:"
    },
    {
      "type": "text",
      "content": "A list of fields:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"p\">[</span><span class=\"s1\">'field1'</span><span class=\"p\">,</span> <span class=\"s1\">'field2'</span><span class=\"p\">]</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "A dict where keys are fields and values are output names:"
    },
    {
      "type": "text",
      "content": "A dict where keys are fields and values are output names:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"p\">{</span><span class=\"s1\">'field1'</span><span class=\"p\">:</span> <span class=\"s1\">'Field 1'</span><span class=\"p\">,</span> <span class=\"s1\">'field2'</span><span class=\"p\">:</span> <span class=\"s1\">'Field 2'</span><span class=\"p\">}</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "Not all exporters respect the specified field order."
    },
    {
      "type": "text",
      "content": "When using "
    },
    {
      "type": "text",
      "content": "Whether to include empty/unpopulated item fields in the exported data.\nDefaults to "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CsvItemExporter</span></code>"
    },
    {
      "type": "text",
      "content": "This option is ignored for dict items."
    },
    {
      "type": "text",
      "content": "The output character encoding."
    },
    {
      "type": "text",
      "content": "Amount of spaces used to indent the output on each level. Defaults to "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code>"
    },
    {
      "type": "text",
      "content": "indent=None"
    },
    {
      "type": "text",
      "content": "indent=None"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">indent=None</span></code>"
    },
    {
      "type": "text",
      "content": "indent<=0"
    },
    {
      "type": "text",
      "content": "indent<=0"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">indent&lt;=0</span></code>"
    },
    {
      "type": "text",
      "content": "indent>0"
    },
    {
      "type": "text",
      "content": "indent>0"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">indent&gt;0</span></code>"
    },
    {
      "type": "text",
      "content": "PythonItemExporter"
    },
    {
      "type": "text",
      "content": "This is a base class for item exporters that extends\n"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BaseItemExporter</span></code>"
    },
    {
      "type": "text",
      "content": "It serializes items to built-in Python types, so that any serialization\nlibrary (e.g. "
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">json</span></code>"
    },
    {
      "type": "text",
      "content": "XmlItemExporter"
    },
    {
      "type": "text",
      "content": "Exports items in XML format to the specified file object."
    },
    {
      "type": "text",
      "content": "file"
    },
    {
      "type": "text",
      "content": "file"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">write</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">bytes</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">io.BytesIO</span></code>"
    },
    {
      "type": "text",
      "content": "root_element"
    },
    {
      "type": "text",
      "content": "root_element"
    },
    {
      "type": "text",
      "content": "item_element"
    },
    {
      "type": "text",
      "content": "item_element"
    },
    {
      "type": "text",
      "content": "The additional keyword arguments of this "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BaseItemExporter</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>"
    },
    {
      "type": "text",
      "content": "A typical output of this exporter would be:"
    },
    {
      "type": "code",
      "content": "<pre><span></span>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;items&gt;\n  &lt;item&gt;\n    &lt;name&gt;Color TV&lt;/name&gt;\n    &lt;price&gt;1200&lt;/price&gt;\n &lt;/item&gt;\n  &lt;item&gt;\n    &lt;name&gt;DVD player&lt;/name&gt;\n    &lt;price&gt;200&lt;/price&gt;\n &lt;/item&gt;\n&lt;/items&gt;\n</pre>"
    },
    {
      "type": "text",
      "content": "Unless overridden in the "
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">serialize_field()</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;value&gt;</span></code>"
    },
    {
      "type": "text",
      "content": "For example, the item:"
    },
    {
      "type": "code",
      "content": "<pre><span></span>Item(name=['John', 'Doe'], age='23')\n</pre>"
    },
    {
      "type": "text",
      "content": "Would be serialized as:"
    },
    {
      "type": "code",
      "content": "<pre><span></span>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;items&gt;\n  &lt;item&gt;\n    &lt;name&gt;\n      &lt;value&gt;John&lt;/value&gt;\n      &lt;value&gt;Doe&lt;/value&gt;\n    &lt;/name&gt;\n    &lt;age&gt;23&lt;/age&gt;\n  &lt;/item&gt;\n&lt;/items&gt;\n</pre>"
    },
    {
      "type": "text",
      "content": "CsvItemExporter"
    },
    {
      "type": "text",
      "content": "Exports items in CSV format to the given file-like object. If the\n"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">fields_to_export</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">export_empty_fields</span></code>"
    },
    {
      "type": "text",
      "content": "file"
    },
    {
      "type": "text",
      "content": "file"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">write</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">bytes</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">io.BytesIO</span></code>"
    },
    {
      "type": "text",
      "content": "include_headers_line"
    },
    {
      "type": "text",
      "content": "include_headers_line"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">BaseItemExporter.fields_to_export</span></code>"
    },
    {
      "type": "text",
      "content": "join_multivalued"
    },
    {
      "type": "text",
      "content": "join_multivalued"
    },
    {
      "type": "text",
      "content": "errors"
    },
    {
      "type": "text",
      "content": "errors"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">io.TextIOWrapper</span></code>"
    },
    {
      "type": "text",
      "content": "The additional keyword arguments of this "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BaseItemExporter</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">csv.writer()</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">csv.writer()</span></code>"
    },
    {
      "type": "text",
      "content": "A typical output of this exporter would be:"
    },
    {
      "type": "code",
      "content": "<pre><span></span>product,price\nColor TV,1200\nDVD player,200\n</pre>"
    },
    {
      "type": "text",
      "content": "PickleItemExporter"
    },
    {
      "type": "text",
      "content": "Exports items in pickle format to the given file-like object."
    },
    {
      "type": "text",
      "content": "file"
    },
    {
      "type": "text",
      "content": "file"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">write</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">bytes</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">io.BytesIO</span></code>"
    },
    {
      "type": "text",
      "content": "protocol"
    },
    {
      "type": "text",
      "content": "protocol"
    },
    {
      "type": "text",
      "content": "For more information, see "
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code>"
    },
    {
      "type": "text",
      "content": "The additional keyword arguments of this "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BaseItemExporter</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>"
    },
    {
      "type": "text",
      "content": "Pickle isn’t a human readable format, so no output examples are provided."
    },
    {
      "type": "text",
      "content": "PprintItemExporter"
    },
    {
      "type": "text",
      "content": "Exports items in pretty print format to the specified file object."
    },
    {
      "type": "text",
      "content": "file"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">write</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">bytes</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">io.BytesIO</span></code>"
    },
    {
      "type": "text",
      "content": "The additional keyword arguments of this "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BaseItemExporter</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>"
    },
    {
      "type": "text",
      "content": "A typical output of this exporter would be:"
    },
    {
      "type": "code",
      "content": "<pre><span></span>{'name': 'Color TV', 'price': '1200'}\n{'name': 'DVD player', 'price': '200'}\n</pre>"
    },
    {
      "type": "text",
      "content": "Longer lines (when present) are pretty-formatted."
    },
    {
      "type": "text",
      "content": "JsonItemExporter"
    },
    {
      "type": "text",
      "content": "Exports items in JSON format to the specified file-like object, writing all\nobjects as a list of objects. The additional "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BaseItemExporter</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JSONEncoder</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JSONEncoder</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>"
    },
    {
      "type": "text",
      "content": "file"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">write</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">bytes</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">io.BytesIO</span></code>"
    },
    {
      "type": "text",
      "content": "A typical output of this exporter would be:"
    },
    {
      "type": "code",
      "content": "<pre><span></span>[{\"name\": \"Color TV\", \"price\": \"1200\"},\n{\"name\": \"DVD player\", \"price\": \"200\"}]\n</pre>"
    },
    {
      "type": "text",
      "content": "Warning"
    },
    {
      "type": "text",
      "content": "JSON is very simple and flexible serialization format, but it\ndoesn’t scale well for large amounts of data since incremental (aka.\nstream-mode) parsing is not well supported (if at all) among JSON parsers\n(on any language), and most of them just parse the entire object in\nmemory. If you want the power and simplicity of JSON with a more\nstream-friendly format, consider using "
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JsonLinesItemExporter</span></code>"
    },
    {
      "type": "text",
      "content": "JsonLinesItemExporter"
    },
    {
      "type": "text",
      "content": "Exports items in JSON format to the specified file-like object, writing one\nJSON-encoded item per line. The additional "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BaseItemExporter</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JSONEncoder</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JSONEncoder</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>"
    },
    {
      "type": "text",
      "content": "file"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">write</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">bytes</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">io.BytesIO</span></code>"
    },
    {
      "type": "text",
      "content": "A typical output of this exporter would be:"
    },
    {
      "type": "code",
      "content": "<pre><span></span>{\"name\": \"Color TV\", \"price\": \"1200\"}\n{\"name\": \"DVD player\", \"price\": \"200\"}\n</pre>"
    },
    {
      "type": "text",
      "content": "Unlike the one produced by "
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JsonItemExporter</span></code>"
    },
    {
      "type": "text",
      "content": "MarshalItemExporter"
    },
    {
      "type": "text",
      "content": "Exports items in a Python-specific binary format (see\n"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">marshal</span></code>"
    },
    {
      "type": "text",
      "content": "file"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">write</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">bytes</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BytesIO</span></code>"
    },
    {
      "type": "text",
      "content": "© Copyright Scrapy developers.\n      "
    },
    {
      "type": "code",
      "content": "<code>b84d000c</code>"
    }
  ]
}