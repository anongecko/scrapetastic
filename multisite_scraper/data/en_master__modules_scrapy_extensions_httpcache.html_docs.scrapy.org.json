{
  "url": "https://docs.scrapy.org/en/master/_modules/scrapy/extensions/httpcache.html",
  "title": "scrapy.extensions.httpcache — Scrapy 2.11.2 documentation",
  "content": [
    {
      "type": "text",
      "content": "First steps"
    },
    {
      "type": "text",
      "content": "Scrapy at a glance"
    },
    {
      "type": "text",
      "content": "Installation guide"
    },
    {
      "type": "text",
      "content": "Scrapy Tutorial"
    },
    {
      "type": "text",
      "content": "Examples"
    },
    {
      "type": "text",
      "content": "Basic concepts"
    },
    {
      "type": "text",
      "content": "Command line tool"
    },
    {
      "type": "text",
      "content": "Spiders"
    },
    {
      "type": "text",
      "content": "Selectors"
    },
    {
      "type": "text",
      "content": "Items"
    },
    {
      "type": "text",
      "content": "Item Loaders"
    },
    {
      "type": "text",
      "content": "Scrapy shell"
    },
    {
      "type": "text",
      "content": "Item Pipeline"
    },
    {
      "type": "text",
      "content": "Feed exports"
    },
    {
      "type": "text",
      "content": "Requests and Responses"
    },
    {
      "type": "text",
      "content": "Link Extractors"
    },
    {
      "type": "text",
      "content": "Settings"
    },
    {
      "type": "text",
      "content": "Exceptions"
    },
    {
      "type": "text",
      "content": "Built-in services"
    },
    {
      "type": "text",
      "content": "Logging"
    },
    {
      "type": "text",
      "content": "Stats Collection"
    },
    {
      "type": "text",
      "content": "Sending e-mail"
    },
    {
      "type": "text",
      "content": "Telnet Console"
    },
    {
      "type": "text",
      "content": "Solving specific problems"
    },
    {
      "type": "text",
      "content": "Frequently Asked Questions"
    },
    {
      "type": "text",
      "content": "Debugging Spiders"
    },
    {
      "type": "text",
      "content": "Spiders Contracts"
    },
    {
      "type": "text",
      "content": "Common Practices"
    },
    {
      "type": "text",
      "content": "Broad Crawls"
    },
    {
      "type": "text",
      "content": "Using your browser’s Developer Tools for scraping"
    },
    {
      "type": "text",
      "content": "Selecting dynamically-loaded content"
    },
    {
      "type": "text",
      "content": "Debugging memory leaks"
    },
    {
      "type": "text",
      "content": "Downloading and processing files and images"
    },
    {
      "type": "text",
      "content": "Deploying Spiders"
    },
    {
      "type": "text",
      "content": "AutoThrottle extension"
    },
    {
      "type": "text",
      "content": "Benchmarking"
    },
    {
      "type": "text",
      "content": "Jobs: pausing and resuming crawls"
    },
    {
      "type": "text",
      "content": "Coroutines"
    },
    {
      "type": "text",
      "content": "asyncio"
    },
    {
      "type": "text",
      "content": "Extending Scrapy"
    },
    {
      "type": "text",
      "content": "Architecture overview"
    },
    {
      "type": "text",
      "content": "Add-ons"
    },
    {
      "type": "text",
      "content": "Downloader Middleware"
    },
    {
      "type": "text",
      "content": "Spider Middleware"
    },
    {
      "type": "text",
      "content": "Extensions"
    },
    {
      "type": "text",
      "content": "Signals"
    },
    {
      "type": "text",
      "content": "Scheduler"
    },
    {
      "type": "text",
      "content": "Item Exporters"
    },
    {
      "type": "text",
      "content": "Components"
    },
    {
      "type": "text",
      "content": "Core API"
    },
    {
      "type": "text",
      "content": "All the rest"
    },
    {
      "type": "text",
      "content": "Release notes"
    },
    {
      "type": "text",
      "content": "Contributing to Scrapy"
    },
    {
      "type": "text",
      "content": "Versioning and API stability"
    },
    {
      "type": "text",
      "content": null
    },
    {
      "type": "text",
      "content": "Module code"
    },
    {
      "type": "text",
      "content": "scrapy.extensions.httpcache"
    },
    {
      "type": "text",
      "content": "\n      "
    },
    {
      "type": "text",
      "content": "Source code for scrapy.extensions.httpcache"
    },
    {
      "type": "code",
      "content": "<pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">annotations</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">gzip</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pickle</span>  <span class=\"c1\"># nosec</span>\n<span class=\"kn\">from</span> <span class=\"nn\">email.utils</span> <span class=\"kn\">import</span> <span class=\"n\">mktime_tz</span><span class=\"p\">,</span> <span class=\"n\">parsedate_tz</span>\n<span class=\"kn\">from</span> <span class=\"nn\">importlib</span> <span class=\"kn\">import</span> <span class=\"n\">import_module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">types</span> <span class=\"kn\">import</span> <span class=\"n\">ModuleType</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">IO</span><span class=\"p\">,</span> <span class=\"n\">TYPE_CHECKING</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">,</span> <span class=\"n\">cast</span>\n<span class=\"kn\">from</span> <span class=\"nn\">weakref</span> <span class=\"kn\">import</span> <span class=\"n\">WeakKeyDictionary</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">w3lib.http</span> <span class=\"kn\">import</span> <span class=\"n\">headers_dict_to_raw</span><span class=\"p\">,</span> <span class=\"n\">headers_raw_to_dict</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">scrapy.http</span> <span class=\"kn\">import</span> <span class=\"n\">Headers</span><span class=\"p\">,</span> <span class=\"n\">Response</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scrapy.responsetypes</span> <span class=\"kn\">import</span> <span class=\"n\">responsetypes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scrapy.utils.httpobj</span> <span class=\"kn\">import</span> <span class=\"n\">urlparse_cached</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scrapy.utils.project</span> <span class=\"kn\">import</span> <span class=\"n\">data_path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scrapy.utils.python</span> <span class=\"kn\">import</span> <span class=\"n\">to_bytes</span><span class=\"p\">,</span> <span class=\"n\">to_unicode</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scrapy.utils.request</span> <span class=\"kn\">import</span> <span class=\"n\">RequestFingerprinter</span>\n\n<span class=\"k\">if</span> <span class=\"n\">TYPE_CHECKING</span><span class=\"p\">:</span>\n    <span class=\"c1\"># typing.Concatenate requires Python 3.10</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">typing_extensions</span> <span class=\"kn\">import</span> <span class=\"n\">Concatenate</span>\n\n    <span class=\"kn\">from</span> <span class=\"nn\">scrapy.http.request</span> <span class=\"kn\">import</span> <span class=\"n\">Request</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">scrapy.settings</span> <span class=\"kn\">import</span> <span class=\"n\">BaseSettings</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">scrapy.spiders</span> <span class=\"kn\">import</span> <span class=\"n\">Spider</span>\n\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"DummyPolicy\"><a class=\"viewcode-back\" href=\"../../../topics/downloader-middleware.html#scrapy.extensions.httpcache.DummyPolicy\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">DummyPolicy</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"n\">BaseSettings</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ignore_schemes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">getlist</span><span class=\"p\">(</span><span class=\"s2\">\"HTTPCACHE_IGNORE_SCHEMES\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ignore_http_codes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">getlist</span><span class=\"p\">(</span><span class=\"s2\">\"HTTPCACHE_IGNORE_HTTP_CODES\"</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">should_cache_request</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">urlparse_cached</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">scheme</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ignore_schemes</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">should_cache_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ignore_http_codes</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_cached_response_fresh</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cachedresponse</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_cached_response_valid</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cachedresponse</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n\n<div class=\"viewcode-block\" id=\"RFC2616Policy\"><a class=\"viewcode-back\" href=\"../../../topics/downloader-middleware.html#scrapy.extensions.httpcache.RFC2616Policy\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">RFC2616Policy</span><span class=\"p\">:</span>\n    <span class=\"n\">MAXAGE</span> <span class=\"o\">=</span> <span class=\"mi\">3600</span> <span class=\"o\">*</span> <span class=\"mi\">24</span> <span class=\"o\">*</span> <span class=\"mi\">365</span>  <span class=\"c1\"># one year</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"n\">BaseSettings</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">always_store</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">getbool</span><span class=\"p\">(</span><span class=\"s2\">\"HTTPCACHE_ALWAYS_STORE\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ignore_schemes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">getlist</span><span class=\"p\">(</span><span class=\"s2\">\"HTTPCACHE_IGNORE_SCHEMES\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cc_parsed</span><span class=\"p\">:</span> <span class=\"n\">WeakKeyDictionary</span><span class=\"p\">[</span>\n            <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">Response</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">]]</span>\n        <span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">WeakKeyDictionary</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ignore_response_cache_controls</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">to_bytes</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">cc</span> <span class=\"ow\">in</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">getlist</span><span class=\"p\">(</span><span class=\"s2\">\"HTTPCACHE_IGNORE_RESPONSE_CACHE_CONTROLS\"</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_parse_cachecontrol</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">Response</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">]]:</span>\n        <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cc_parsed</span><span class=\"p\">:</span>\n            <span class=\"n\">cch</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"Cache-Control\"</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n            <span class=\"k\">assert</span> <span class=\"n\">cch</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n            <span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">parse_cachecontrol</span><span class=\"p\">(</span><span class=\"n\">cch</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">Response</span><span class=\"p\">):</span>\n                <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ignore_response_cache_controls</span><span class=\"p\">:</span>\n                    <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cc_parsed</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">parsed</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_cc_parsed</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">should_cache_request</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">urlparse_cached</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">scheme</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ignore_schemes</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parse_cachecontrol</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"c1\"># obey user-agent directive \"Cache-Control: no-store\"</span>\n        <span class=\"k\">if</span> <span class=\"sa\">b</span><span class=\"s2\">\"no-store\"</span> <span class=\"ow\">in</span> <span class=\"n\">cc</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"c1\"># Any other is eligible for caching</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">should_cache_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"c1\"># What is cacheable - https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9.1</span>\n        <span class=\"c1\"># Response cacheability - https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.4</span>\n        <span class=\"c1\"># Status code 206 is not included because cache can not deal with partial contents</span>\n        <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parse_cachecontrol</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n        <span class=\"c1\"># obey directive \"Cache-Control: no-store\"</span>\n        <span class=\"k\">if</span> <span class=\"sa\">b</span><span class=\"s2\">\"no-store\"</span> <span class=\"ow\">in</span> <span class=\"n\">cc</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"c1\"># Never cache 304 (Not Modified) responses</span>\n        <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"mi\">304</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"c1\"># Cache unconditionally if configured to do so</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">always_store</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"c1\"># Any hint on response expiration is good</span>\n        <span class=\"k\">if</span> <span class=\"sa\">b</span><span class=\"s2\">\"max-age\"</span> <span class=\"ow\">in</span> <span class=\"n\">cc</span> <span class=\"ow\">or</span> <span class=\"sa\">b</span><span class=\"s2\">\"Expires\"</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"c1\"># Firefox fallbacks this statuses to one year expiration if none is set</span>\n        <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">301</span><span class=\"p\">,</span> <span class=\"mi\">308</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"c1\"># Other statuses without expiration requires at least one validator</span>\n        <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">203</span><span class=\"p\">,</span> <span class=\"mi\">401</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"sa\">b</span><span class=\"s2\">\"Last-Modified\"</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span> <span class=\"ow\">or</span> <span class=\"sa\">b</span><span class=\"s2\">\"ETag\"</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span>\n        <span class=\"c1\"># Any other is probably not eligible for caching</span>\n        <span class=\"c1\"># Makes no sense to cache responses that does not contain expiration</span>\n        <span class=\"c1\"># info and can not be revalidated</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_cached_response_fresh</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cachedresponse</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parse_cachecontrol</span><span class=\"p\">(</span><span class=\"n\">cachedresponse</span><span class=\"p\">)</span>\n        <span class=\"n\">ccreq</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parse_cachecontrol</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"sa\">b</span><span class=\"s2\">\"no-cache\"</span> <span class=\"ow\">in</span> <span class=\"n\">cc</span> <span class=\"ow\">or</span> <span class=\"sa\">b</span><span class=\"s2\">\"no-cache\"</span> <span class=\"ow\">in</span> <span class=\"n\">ccreq</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"n\">freshnesslifetime</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_compute_freshness_lifetime</span><span class=\"p\">(</span>\n            <span class=\"n\">cachedresponse</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">now</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">currentage</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_compute_current_age</span><span class=\"p\">(</span><span class=\"n\">cachedresponse</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">now</span><span class=\"p\">)</span>\n\n        <span class=\"n\">reqmaxage</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_max_age</span><span class=\"p\">(</span><span class=\"n\">ccreq</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">reqmaxage</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">freshnesslifetime</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">freshnesslifetime</span><span class=\"p\">,</span> <span class=\"n\">reqmaxage</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">currentage</span> <span class=\"o\">&lt;</span> <span class=\"n\">freshnesslifetime</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">if</span> <span class=\"sa\">b</span><span class=\"s2\">\"max-stale\"</span> <span class=\"ow\">in</span> <span class=\"n\">ccreq</span> <span class=\"ow\">and</span> <span class=\"sa\">b</span><span class=\"s2\">\"must-revalidate\"</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">cc</span><span class=\"p\">:</span>\n            <span class=\"c1\"># From RFC2616: \"Indicates that the client is willing to</span>\n            <span class=\"c1\"># accept a response that has exceeded its expiration time.</span>\n            <span class=\"c1\"># If max-stale is assigned a value, then the client is</span>\n            <span class=\"c1\"># willing to accept a response that has exceeded its</span>\n            <span class=\"c1\"># expiration time by no more than the specified number of</span>\n            <span class=\"c1\"># seconds. If no value is assigned to max-stale, then the</span>\n            <span class=\"c1\"># client is willing to accept a stale response of any age.\"</span>\n            <span class=\"n\">staleage</span> <span class=\"o\">=</span> <span class=\"n\">ccreq</span><span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s2\">\"max-stale\"</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">staleage</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">currentage</span> <span class=\"o\">&lt;</span> <span class=\"n\">freshnesslifetime</span> <span class=\"o\">+</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">staleage</span><span class=\"p\">)):</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n            <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n\n        <span class=\"c1\"># Cached response is stale, try to set validators if any</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_conditional_validators</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">cachedresponse</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_cached_response_valid</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cachedresponse</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Use the cached response if the new response is a server error,</span>\n        <span class=\"c1\"># as long as the old response didn't specify must-revalidate.</span>\n        <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">500</span><span class=\"p\">:</span>\n            <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parse_cachecontrol</span><span class=\"p\">(</span><span class=\"n\">cachedresponse</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"sa\">b</span><span class=\"s2\">\"must-revalidate\"</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">cc</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n        <span class=\"c1\"># Use the cached response if the server says it hasn't changed.</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"mi\">304</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_set_conditional_validators</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">cachedresponse</span><span class=\"p\">:</span> <span class=\"n\">Response</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"sa\">b</span><span class=\"s2\">\"Last-Modified\"</span> <span class=\"ow\">in</span> <span class=\"n\">cachedresponse</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">:</span>\n            <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s2\">\"If-Modified-Since\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cachedresponse</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span>\n                <span class=\"sa\">b</span><span class=\"s2\">\"Last-Modified\"</span>\n            <span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"sa\">b</span><span class=\"s2\">\"ETag\"</span> <span class=\"ow\">in</span> <span class=\"n\">cachedresponse</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">:</span>\n            <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s2\">\"If-None-Match\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cachedresponse</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s2\">\"ETag\"</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_max_age</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cc</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">]])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s2\">\"max-age\"</span><span class=\"p\">]))</span>  <span class=\"c1\"># type: ignore[arg-type]</span>\n        <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">KeyError</span><span class=\"p\">,</span> <span class=\"ne\">ValueError</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_compute_freshness_lifetime</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">now</span><span class=\"p\">:</span> <span class=\"nb\">float</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">float</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Reference nsHttpResponseHead::ComputeFreshnessLifetime</span>\n        <span class=\"c1\"># https://dxr.mozilla.org/mozilla-central/source/netwerk/protocol/http/nsHttpResponseHead.cpp#706</span>\n        <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_parse_cachecontrol</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n        <span class=\"n\">maxage</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_max_age</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">maxage</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">maxage</span>\n\n        <span class=\"c1\"># Parse date header or synthesize it if none exists</span>\n        <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">rfc1123_to_epoch</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"Date\"</span><span class=\"p\">))</span> <span class=\"ow\">or</span> <span class=\"n\">now</span>\n\n        <span class=\"c1\"># Try HTTP/1.0 Expires header</span>\n        <span class=\"k\">if</span> <span class=\"sa\">b</span><span class=\"s2\">\"Expires\"</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">:</span>\n            <span class=\"n\">expires</span> <span class=\"o\">=</span> <span class=\"n\">rfc1123_to_epoch</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s2\">\"Expires\"</span><span class=\"p\">])</span>\n            <span class=\"c1\"># When parsing Expires header fails RFC 2616 section 14.21 says we</span>\n            <span class=\"c1\"># should treat this as an expiration time in the past.</span>\n            <span class=\"k\">return</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">expires</span> <span class=\"o\">-</span> <span class=\"n\">date</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">expires</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n        <span class=\"c1\"># Fallback to heuristic using last-modified header</span>\n        <span class=\"c1\"># This is not in RFC but on Firefox caching implementation</span>\n        <span class=\"n\">lastmodified</span> <span class=\"o\">=</span> <span class=\"n\">rfc1123_to_epoch</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"Last-Modified\"</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">lastmodified</span> <span class=\"ow\">and</span> <span class=\"n\">lastmodified</span> <span class=\"o\">&lt;=</span> <span class=\"n\">date</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">date</span> <span class=\"o\">-</span> <span class=\"n\">lastmodified</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">10</span>\n\n        <span class=\"c1\"># This request can be cached indefinitely</span>\n        <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">301</span><span class=\"p\">,</span> <span class=\"mi\">308</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">MAXAGE</span>\n\n        <span class=\"c1\"># Insufficient information to compute freshness lifetime</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_compute_current_age</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">now</span><span class=\"p\">:</span> <span class=\"nb\">float</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">float</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Reference nsHttpResponseHead::ComputeCurrentAge</span>\n        <span class=\"c1\"># https://dxr.mozilla.org/mozilla-central/source/netwerk/protocol/http/nsHttpResponseHead.cpp#658</span>\n        <span class=\"n\">currentage</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"c1\"># If Date header is not set we assume it is a fast connection, and</span>\n        <span class=\"c1\"># clock is in sync with the server</span>\n        <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">rfc1123_to_epoch</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"Date\"</span><span class=\"p\">))</span> <span class=\"ow\">or</span> <span class=\"n\">now</span>\n        <span class=\"k\">if</span> <span class=\"n\">now</span> <span class=\"o\">&gt;</span> <span class=\"n\">date</span><span class=\"p\">:</span>\n            <span class=\"n\">currentage</span> <span class=\"o\">=</span> <span class=\"n\">now</span> <span class=\"o\">-</span> <span class=\"n\">date</span>\n\n        <span class=\"k\">if</span> <span class=\"sa\">b</span><span class=\"s2\">\"Age\"</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s2\">\"Age\"</span><span class=\"p\">])</span>  <span class=\"c1\"># type: ignore[arg-type]</span>\n                <span class=\"n\">currentage</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">currentage</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">currentage</span></div>\n\n\n<div class=\"viewcode-block\" id=\"DbmCacheStorage\"><a class=\"viewcode-back\" href=\"../../../topics/downloader-middleware.html#scrapy.extensions.httpcache.DbmCacheStorage\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">DbmCacheStorage</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"n\">BaseSettings</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cachedir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">data_path</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"p\">[</span><span class=\"s2\">\"HTTPCACHE_DIR\"</span><span class=\"p\">],</span> <span class=\"n\">createdir</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expiration_secs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">getint</span><span class=\"p\">(</span><span class=\"s2\">\"HTTPCACHE_EXPIRATION_SECS\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dbmodule</span><span class=\"p\">:</span> <span class=\"n\">ModuleType</span> <span class=\"o\">=</span> <span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"p\">[</span><span class=\"s2\">\"HTTPCACHE_DBM_MODULE\"</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>  <span class=\"c1\"># the real type is private</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">open_spider</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"p\">:</span> <span class=\"n\">Spider</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">dbpath</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cachedir</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">spider</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">.db\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dbmodule</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">dbpath</span><span class=\"p\">),</span> <span class=\"s2\">\"c\"</span><span class=\"p\">)</span>\n\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"Using DBM cache storage in </span><span class=\"si\">%(cachepath)s</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n            <span class=\"p\">{</span><span class=\"s2\">\"cachepath\"</span><span class=\"p\">:</span> <span class=\"n\">dbpath</span><span class=\"p\">},</span>\n            <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"spider\"</span><span class=\"p\">:</span> <span class=\"n\">spider</span><span class=\"p\">},</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">spider</span><span class=\"o\">.</span><span class=\"n\">crawler</span><span class=\"o\">.</span><span class=\"n\">request_fingerprinter</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fingerprinter</span><span class=\"p\">:</span> <span class=\"n\">RequestFingerprinter</span> <span class=\"o\">=</span> <span class=\"n\">spider</span><span class=\"o\">.</span><span class=\"n\">crawler</span><span class=\"o\">.</span><span class=\"n\">request_fingerprinter</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">close_spider</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"p\">:</span> <span class=\"n\">Spider</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">retrieve_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"p\">:</span> <span class=\"n\">Spider</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Response</span><span class=\"p\">]:</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_read_data</span><span class=\"p\">(</span><span class=\"n\">spider</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>  <span class=\"c1\"># not cached</span>\n        <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"url\"</span><span class=\"p\">]</span>\n        <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"status\"</span><span class=\"p\">]</span>\n        <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"n\">Headers</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"headers\"</span><span class=\"p\">])</span>\n        <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"body\"</span><span class=\"p\">]</span>\n        <span class=\"n\">respcls</span> <span class=\"o\">=</span> <span class=\"n\">responsetypes</span><span class=\"o\">.</span><span class=\"n\">from_args</span><span class=\"p\">(</span><span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"n\">body</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">respcls</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"n\">body</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">store_response</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"p\">:</span> <span class=\"n\">Spider</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fingerprinter</span><span class=\"o\">.</span><span class=\"n\">fingerprint</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">()</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"status\"</span><span class=\"p\">:</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"url\"</span><span class=\"p\">:</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"headers\"</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">),</span>\n            <span class=\"s2\">\"body\"</span><span class=\"p\">:</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\">_data\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">protocol</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\">_time\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_read_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"p\">:</span> <span class=\"n\">Spider</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]:</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fingerprinter</span><span class=\"o\">.</span><span class=\"n\">fingerprint</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">()</span>\n        <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">db</span>\n        <span class=\"n\">tkey</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\">_time\"</span>\n        <span class=\"k\">if</span> <span class=\"n\">tkey</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">db</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>  <span class=\"c1\"># not found</span>\n\n        <span class=\"n\">ts</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"p\">[</span><span class=\"n\">tkey</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expiration_secs</span> <span class=\"o\">&lt;</span> <span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">ts</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>  <span class=\"c1\"># expired</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\">_data\"</span><span class=\"p\">]))</span>  <span class=\"c1\"># nosec</span></div>\n\n\n<div class=\"viewcode-block\" id=\"FilesystemCacheStorage\"><a class=\"viewcode-back\" href=\"../../../topics/downloader-middleware.html#scrapy.extensions.httpcache.FilesystemCacheStorage\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">FilesystemCacheStorage</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"n\">BaseSettings</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cachedir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">data_path</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"p\">[</span><span class=\"s2\">\"HTTPCACHE_DIR\"</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expiration_secs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">getint</span><span class=\"p\">(</span><span class=\"s2\">\"HTTPCACHE_EXPIRATION_SECS\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">use_gzip</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">getbool</span><span class=\"p\">(</span><span class=\"s2\">\"HTTPCACHE_GZIP\"</span><span class=\"p\">)</span>\n        <span class=\"c1\"># https://github.com/python/mypy/issues/10740</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_open</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span>\n            <span class=\"n\">Concatenate</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">IO</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">]</span>\n        <span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">gzip</span><span class=\"o\">.</span><span class=\"n\">open</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">use_gzip</span> <span class=\"k\">else</span> <span class=\"nb\">open</span>  <span class=\"c1\"># type: ignore[assignment]</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">open_spider</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"p\">:</span> <span class=\"n\">Spider</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"Using filesystem cache storage in </span><span class=\"si\">%(cachedir)s</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n            <span class=\"p\">{</span><span class=\"s2\">\"cachedir\"</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cachedir</span><span class=\"p\">},</span>\n            <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"spider\"</span><span class=\"p\">:</span> <span class=\"n\">spider</span><span class=\"p\">},</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">spider</span><span class=\"o\">.</span><span class=\"n\">crawler</span><span class=\"o\">.</span><span class=\"n\">request_fingerprinter</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fingerprinter</span> <span class=\"o\">=</span> <span class=\"n\">spider</span><span class=\"o\">.</span><span class=\"n\">crawler</span><span class=\"o\">.</span><span class=\"n\">request_fingerprinter</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">close_spider</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"p\">:</span> <span class=\"n\">Spider</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">retrieve_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"p\">:</span> <span class=\"n\">Spider</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Response</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\"Return response if present in cache, or None otherwise.\"\"\"</span>\n        <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_read_meta</span><span class=\"p\">(</span><span class=\"n\">spider</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">metadata</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>  <span class=\"c1\"># not cached</span>\n        <span class=\"n\">rpath</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_request_path</span><span class=\"p\">(</span><span class=\"n\">spider</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">))</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_open</span><span class=\"p\">(</span><span class=\"n\">rpath</span> <span class=\"o\">/</span> <span class=\"s2\">\"response_body\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_open</span><span class=\"p\">(</span><span class=\"n\">rpath</span> <span class=\"o\">/</span> <span class=\"s2\">\"response_headers\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">rawheaders</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n        <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"s2\">\"response_url\"</span><span class=\"p\">]</span>\n        <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"s2\">\"status\"</span><span class=\"p\">]</span>\n        <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"n\">Headers</span><span class=\"p\">(</span><span class=\"n\">headers_raw_to_dict</span><span class=\"p\">(</span><span class=\"n\">rawheaders</span><span class=\"p\">))</span>\n        <span class=\"n\">respcls</span> <span class=\"o\">=</span> <span class=\"n\">responsetypes</span><span class=\"o\">.</span><span class=\"n\">from_args</span><span class=\"p\">(</span><span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"n\">body</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">respcls</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"n\">body</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">store_response</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"p\">:</span> <span class=\"n\">Spider</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"n\">Response</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\"Store the given response in the cache.\"\"\"</span>\n        <span class=\"n\">rpath</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_request_path</span><span class=\"p\">(</span><span class=\"n\">spider</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">rpath</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n            <span class=\"n\">rpath</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"n\">parents</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"url\"</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"method\"</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"status\"</span><span class=\"p\">:</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"response_url\"</span><span class=\"p\">:</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"n\">time</span><span class=\"p\">(),</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_open</span><span class=\"p\">(</span><span class=\"n\">rpath</span> <span class=\"o\">/</span> <span class=\"s2\">\"meta\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">to_bytes</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">metadata</span><span class=\"p\">)))</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_open</span><span class=\"p\">(</span><span class=\"n\">rpath</span> <span class=\"o\">/</span> <span class=\"s2\">\"pickled_meta\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">metadata</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">protocol</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_open</span><span class=\"p\">(</span><span class=\"n\">rpath</span> <span class=\"o\">/</span> <span class=\"s2\">\"response_headers\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">headers_dict_to_raw</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">))</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_open</span><span class=\"p\">(</span><span class=\"n\">rpath</span> <span class=\"o\">/</span> <span class=\"s2\">\"response_body\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">)</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_open</span><span class=\"p\">(</span><span class=\"n\">rpath</span> <span class=\"o\">/</span> <span class=\"s2\">\"request_headers\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">headers_dict_to_raw</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">))</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_open</span><span class=\"p\">(</span><span class=\"n\">rpath</span> <span class=\"o\">/</span> <span class=\"s2\">\"request_body\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_request_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"p\">:</span> <span class=\"n\">Spider</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_fingerprinter</span><span class=\"o\">.</span><span class=\"n\">fingerprint</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cachedir</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">key</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_read_meta</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"p\">:</span> <span class=\"n\">Spider</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]:</span>\n        <span class=\"n\">rpath</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_request_path</span><span class=\"p\">(</span><span class=\"n\">spider</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">))</span>\n        <span class=\"n\">metapath</span> <span class=\"o\">=</span> <span class=\"n\">rpath</span> <span class=\"o\">/</span> <span class=\"s2\">\"pickled_meta\"</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">metapath</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>  <span class=\"c1\"># not found</span>\n        <span class=\"n\">mtime</span> <span class=\"o\">=</span> <span class=\"n\">metapath</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">st_mtime</span>\n        <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expiration_secs</span> <span class=\"o\">&lt;</span> <span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">mtime</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>  <span class=\"c1\"># expired</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_open</span><span class=\"p\">(</span><span class=\"n\">metapath</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">))</span>  <span class=\"c1\"># nosec</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">parse_cachecontrol</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">]]:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Parse Cache-Control header</span>\n\n<span class=\"sd\">    https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; parse_cachecontrol(b'public, max-age=3600') == {b'public': None,</span>\n<span class=\"sd\">    ...                                                 b'max-age': b'3600'}</span>\n<span class=\"sd\">    True</span>\n<span class=\"sd\">    &gt;&gt;&gt; parse_cachecontrol(b'') == {}</span>\n<span class=\"sd\">    True</span>\n\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">directives</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">directive</span> <span class=\"ow\">in</span> <span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\",\"</span><span class=\"p\">):</span>\n        <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">directive</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"=\"</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">key</span><span class=\"p\">:</span>\n            <span class=\"n\">directives</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()]</span> <span class=\"o\">=</span> <span class=\"n\">val</span> <span class=\"k\">if</span> <span class=\"n\">sep</span> <span class=\"k\">else</span> <span class=\"kc\">None</span>\n    <span class=\"k\">return</span> <span class=\"n\">directives</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">rfc1123_to_epoch</span><span class=\"p\">(</span><span class=\"n\">date_str</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">date_str</span> <span class=\"o\">=</span> <span class=\"n\">to_unicode</span><span class=\"p\">(</span><span class=\"n\">date_str</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">\"ascii\"</span><span class=\"p\">)</span>  <span class=\"c1\"># type: ignore[arg-type]</span>\n        <span class=\"k\">return</span> <span class=\"n\">mktime_tz</span><span class=\"p\">(</span><span class=\"n\">parsedate_tz</span><span class=\"p\">(</span><span class=\"n\">date_str</span><span class=\"p\">))</span>  <span class=\"c1\"># type: ignore[arg-type]</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "© Copyright Scrapy developers.\n      "
    },
    {
      "type": "code",
      "content": "<code>e376c0b3</code>"
    }
  ]
}