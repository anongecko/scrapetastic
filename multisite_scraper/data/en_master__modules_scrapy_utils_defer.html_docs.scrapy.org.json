{
  "url": "https://docs.scrapy.org/en/master/_modules/scrapy/utils/defer.html",
  "title": "scrapy.utils.defer — Scrapy 2.11.2 documentation",
  "content": [
    {
      "type": "text",
      "content": "First steps"
    },
    {
      "type": "text",
      "content": "Scrapy at a glance"
    },
    {
      "type": "text",
      "content": "Installation guide"
    },
    {
      "type": "text",
      "content": "Scrapy Tutorial"
    },
    {
      "type": "text",
      "content": "Examples"
    },
    {
      "type": "text",
      "content": "Basic concepts"
    },
    {
      "type": "text",
      "content": "Command line tool"
    },
    {
      "type": "text",
      "content": "Spiders"
    },
    {
      "type": "text",
      "content": "Selectors"
    },
    {
      "type": "text",
      "content": "Items"
    },
    {
      "type": "text",
      "content": "Item Loaders"
    },
    {
      "type": "text",
      "content": "Scrapy shell"
    },
    {
      "type": "text",
      "content": "Item Pipeline"
    },
    {
      "type": "text",
      "content": "Feed exports"
    },
    {
      "type": "text",
      "content": "Requests and Responses"
    },
    {
      "type": "text",
      "content": "Link Extractors"
    },
    {
      "type": "text",
      "content": "Settings"
    },
    {
      "type": "text",
      "content": "Exceptions"
    },
    {
      "type": "text",
      "content": "Built-in services"
    },
    {
      "type": "text",
      "content": "Logging"
    },
    {
      "type": "text",
      "content": "Stats Collection"
    },
    {
      "type": "text",
      "content": "Sending e-mail"
    },
    {
      "type": "text",
      "content": "Telnet Console"
    },
    {
      "type": "text",
      "content": "Solving specific problems"
    },
    {
      "type": "text",
      "content": "Frequently Asked Questions"
    },
    {
      "type": "text",
      "content": "Debugging Spiders"
    },
    {
      "type": "text",
      "content": "Spiders Contracts"
    },
    {
      "type": "text",
      "content": "Common Practices"
    },
    {
      "type": "text",
      "content": "Broad Crawls"
    },
    {
      "type": "text",
      "content": "Using your browser’s Developer Tools for scraping"
    },
    {
      "type": "text",
      "content": "Selecting dynamically-loaded content"
    },
    {
      "type": "text",
      "content": "Debugging memory leaks"
    },
    {
      "type": "text",
      "content": "Downloading and processing files and images"
    },
    {
      "type": "text",
      "content": "Deploying Spiders"
    },
    {
      "type": "text",
      "content": "AutoThrottle extension"
    },
    {
      "type": "text",
      "content": "Benchmarking"
    },
    {
      "type": "text",
      "content": "Jobs: pausing and resuming crawls"
    },
    {
      "type": "text",
      "content": "Coroutines"
    },
    {
      "type": "text",
      "content": "asyncio"
    },
    {
      "type": "text",
      "content": "Extending Scrapy"
    },
    {
      "type": "text",
      "content": "Architecture overview"
    },
    {
      "type": "text",
      "content": "Add-ons"
    },
    {
      "type": "text",
      "content": "Downloader Middleware"
    },
    {
      "type": "text",
      "content": "Spider Middleware"
    },
    {
      "type": "text",
      "content": "Extensions"
    },
    {
      "type": "text",
      "content": "Signals"
    },
    {
      "type": "text",
      "content": "Scheduler"
    },
    {
      "type": "text",
      "content": "Item Exporters"
    },
    {
      "type": "text",
      "content": "Components"
    },
    {
      "type": "text",
      "content": "Core API"
    },
    {
      "type": "text",
      "content": "All the rest"
    },
    {
      "type": "text",
      "content": "Release notes"
    },
    {
      "type": "text",
      "content": "Contributing to Scrapy"
    },
    {
      "type": "text",
      "content": "Versioning and API stability"
    },
    {
      "type": "text",
      "content": null
    },
    {
      "type": "text",
      "content": "Module code"
    },
    {
      "type": "text",
      "content": "scrapy.utils.defer"
    },
    {
      "type": "text",
      "content": "\n      "
    },
    {
      "type": "text",
      "content": "Source code for scrapy.utils.defer"
    },
    {
      "type": "code",
      "content": "<pre>\n<span></span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Helper functions for dealing with Twisted deferreds</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">annotations</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">asyncio</span> <span class=\"kn\">import</span> <span class=\"n\">Future</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">wraps</span>\n<span class=\"kn\">from</span> <span class=\"nn\">types</span> <span class=\"kn\">import</span> <span class=\"n\">CoroutineType</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">TYPE_CHECKING</span><span class=\"p\">,</span>\n    <span class=\"n\">Any</span><span class=\"p\">,</span>\n    <span class=\"n\">AsyncIterable</span><span class=\"p\">,</span>\n    <span class=\"n\">AsyncIterator</span><span class=\"p\">,</span>\n    <span class=\"n\">Awaitable</span><span class=\"p\">,</span>\n    <span class=\"n\">Callable</span><span class=\"p\">,</span>\n    <span class=\"n\">Coroutine</span><span class=\"p\">,</span>\n    <span class=\"n\">Dict</span><span class=\"p\">,</span>\n    <span class=\"n\">Iterable</span><span class=\"p\">,</span>\n    <span class=\"n\">Iterator</span><span class=\"p\">,</span>\n    <span class=\"n\">List</span><span class=\"p\">,</span>\n    <span class=\"n\">Optional</span><span class=\"p\">,</span>\n    <span class=\"n\">Tuple</span><span class=\"p\">,</span>\n    <span class=\"n\">TypeVar</span><span class=\"p\">,</span>\n    <span class=\"n\">Union</span><span class=\"p\">,</span>\n    <span class=\"n\">cast</span><span class=\"p\">,</span>\n    <span class=\"n\">overload</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet</span> <span class=\"kn\">import</span> <span class=\"n\">defer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet.defer</span> <span class=\"kn\">import</span> <span class=\"n\">Deferred</span><span class=\"p\">,</span> <span class=\"n\">DeferredList</span><span class=\"p\">,</span> <span class=\"n\">ensureDeferred</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet.task</span> <span class=\"kn\">import</span> <span class=\"n\">Cooperator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.python</span> <span class=\"kn\">import</span> <span class=\"n\">failure</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">scrapy.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">IgnoreRequest</span><span class=\"p\">,</span> <span class=\"n\">ScrapyDeprecationWarning</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scrapy.utils.reactor</span> <span class=\"kn\">import</span> <span class=\"n\">_get_asyncio_event_loop</span><span class=\"p\">,</span> <span class=\"n\">is_asyncio_reactor_installed</span>\n\n<span class=\"k\">if</span> <span class=\"n\">TYPE_CHECKING</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">twisted.python.failure</span> <span class=\"kn\">import</span> <span class=\"n\">Failure</span>\n\n    <span class=\"c1\"># typing.Concatenate and typing.ParamSpec require Python 3.10</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">typing_extensions</span> <span class=\"kn\">import</span> <span class=\"n\">Concatenate</span><span class=\"p\">,</span> <span class=\"n\">ParamSpec</span>\n\n    <span class=\"n\">_P</span> <span class=\"o\">=</span> <span class=\"n\">ParamSpec</span><span class=\"p\">(</span><span class=\"s2\">\"_P\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">_T</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s2\">\"_T\"</span><span class=\"p\">)</span>\n<span class=\"n\">_T2</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s2\">\"_T2\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">defer_fail</span><span class=\"p\">(</span><span class=\"n\">_failure</span><span class=\"p\">:</span> <span class=\"n\">Failure</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Same as twisted.internet.defer.fail but delay calling errback until</span>\n<span class=\"sd\">    next reactor loop</span>\n\n<span class=\"sd\">    It delays by 100ms so reactor has a chance to go through readers and writers</span>\n<span class=\"sd\">    before attending pending delayed calls, so do not set delay to zero.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">twisted.internet</span> <span class=\"kn\">import</span> <span class=\"n\">reactor</span>\n\n    <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Deferred</span><span class=\"p\">()</span>\n    <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">callLater</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">errback</span><span class=\"p\">,</span> <span class=\"n\">_failure</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">d</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">defer_succeed</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">:</span> <span class=\"n\">_T</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">]:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Same as twisted.internet.defer.succeed but delay calling callback until</span>\n<span class=\"sd\">    next reactor loop</span>\n\n<span class=\"sd\">    It delays by 100ms so reactor has a chance to go through readers and writers</span>\n<span class=\"sd\">    before attending pending delayed calls, so do not set delay to zero.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">twisted.internet</span> <span class=\"kn\">import</span> <span class=\"n\">reactor</span>\n\n    <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Deferred</span><span class=\"p\">()</span>\n    <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">callLater</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">d</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">defer_result</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]:</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">Deferred</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">failure</span><span class=\"o\">.</span><span class=\"n\">Failure</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">defer_fail</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">defer_succeed</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@overload</span>\n<span class=\"k\">def</span> <span class=\"nf\">mustbe_deferred</span><span class=\"p\">(</span>\n    <span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">_P</span><span class=\"p\">,</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">]],</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">kwargs</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">]:</span> <span class=\"o\">...</span>\n\n\n<span class=\"nd\">@overload</span>\n<span class=\"k\">def</span> <span class=\"nf\">mustbe_deferred</span><span class=\"p\">(</span>\n    <span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">_P</span><span class=\"p\">,</span> <span class=\"n\">Coroutine</span><span class=\"p\">[</span><span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">_T</span><span class=\"p\">]],</span>\n    <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span>\n    <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">]:</span> <span class=\"o\">...</span>\n\n\n<span class=\"nd\">@overload</span>\n<span class=\"k\">def</span> <span class=\"nf\">mustbe_deferred</span><span class=\"p\">(</span>\n    <span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">_P</span><span class=\"p\">,</span> <span class=\"n\">_T</span><span class=\"p\">],</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">kwargs</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">]:</span> <span class=\"o\">...</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">mustbe_deferred</span><span class=\"p\">(</span>\n    <span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">_P</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">],</span> <span class=\"n\">Coroutine</span><span class=\"p\">[</span><span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">_T</span><span class=\"p\">],</span> <span class=\"n\">_T</span><span class=\"p\">]],</span>\n    <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span>\n    <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">]:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Same as twisted.internet.defer.maybeDeferred, but delay calling</span>\n<span class=\"sd\">    callback/errback to next reactor loop</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">)</span>\n    <span class=\"c1\"># FIXME: Hack to avoid introspecting tracebacks. This to speed up</span>\n    <span class=\"c1\"># processing of IgnoreRequest errors which are, by far, the most common</span>\n    <span class=\"c1\"># exception in Scrapy - see #125</span>\n    <span class=\"k\">except</span> <span class=\"n\">IgnoreRequest</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">defer_fail</span><span class=\"p\">(</span><span class=\"n\">failure</span><span class=\"o\">.</span><span class=\"n\">Failure</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">defer_fail</span><span class=\"p\">(</span><span class=\"n\">failure</span><span class=\"o\">.</span><span class=\"n\">Failure</span><span class=\"p\">())</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">defer_result</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">parallel</span><span class=\"p\">(</span>\n    <span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">],</span>\n    <span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n    <span class=\"nb\">callable</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">Concatenate</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">,</span> <span class=\"n\">_P</span><span class=\"p\">],</span> <span class=\"n\">_T2</span><span class=\"p\">],</span>\n    <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span>\n    <span class=\"o\">**</span><span class=\"n\">named</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">_T2</span><span class=\"p\">]]]]:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Execute a callable over the objects in the given iterable, in parallel,</span>\n<span class=\"sd\">    using no more than ``count`` concurrent calls.</span>\n\n<span class=\"sd\">    Taken from: https://jcalderone.livejournal.com/24285.html</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">coop</span> <span class=\"o\">=</span> <span class=\"n\">Cooperator</span><span class=\"p\">()</span>\n    <span class=\"n\">work</span><span class=\"p\">:</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">_T2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nb\">callable</span><span class=\"p\">(</span><span class=\"n\">elem</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">named</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">elem</span> <span class=\"ow\">in</span> <span class=\"n\">iterable</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">DeferredList</span><span class=\"p\">([</span><span class=\"n\">coop</span><span class=\"o\">.</span><span class=\"n\">coiterate</span><span class=\"p\">(</span><span class=\"n\">work</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">)])</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">_AsyncCooperatorAdapter</span><span class=\"p\">(</span><span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Deferred</span><span class=\"p\">]):</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"A class that wraps an async iterable into a normal iterator suitable</span>\n<span class=\"sd\">    for using in Cooperator.coiterate(). As it's only needed for parallel_async(),</span>\n<span class=\"sd\">    it calls the callable directly in the callback, instead of providing a more</span>\n<span class=\"sd\">    generic interface.</span>\n\n<span class=\"sd\">    On the outside, this class behaves as an iterator that yields Deferreds.</span>\n<span class=\"sd\">    Each Deferred is fired with the result of the callable which was called on</span>\n<span class=\"sd\">    the next result from aiterator. It raises StopIteration when aiterator is</span>\n<span class=\"sd\">    exhausted, as expected.</span>\n\n<span class=\"sd\">    Cooperator calls __next__() multiple times and waits on the Deferreds</span>\n<span class=\"sd\">    returned from it. As async generators (since Python 3.8) don't support</span>\n<span class=\"sd\">    awaiting on __anext__() several times in parallel, we need to serialize</span>\n<span class=\"sd\">    this. It's done by storing the Deferreds returned from __next__() and</span>\n<span class=\"sd\">    firing the oldest one when a result from __anext__() is available.</span>\n\n<span class=\"sd\">    The workflow:</span>\n<span class=\"sd\">    1. When __next__() is called for the first time, it creates a Deferred, stores it</span>\n<span class=\"sd\">    in self.waiting_deferreds and returns it. It also makes a Deferred that will wait</span>\n<span class=\"sd\">    for self.aiterator.__anext__() and puts it into self.anext_deferred.</span>\n<span class=\"sd\">    2. If __next__() is called again before self.anext_deferred fires, more Deferreds</span>\n<span class=\"sd\">    are added to self.waiting_deferreds.</span>\n<span class=\"sd\">    3. When self.anext_deferred fires, it either calls _callback() or _errback(). Both</span>\n<span class=\"sd\">    clear self.anext_deferred.</span>\n<span class=\"sd\">    3.1. _callback() calls the callable passing the result value that it takes, pops a</span>\n<span class=\"sd\">    Deferred from self.waiting_deferreds, and if the callable result was a Deferred, it</span>\n<span class=\"sd\">    chains those Deferreds so that the waiting Deferred will fire when the result</span>\n<span class=\"sd\">    Deferred does, otherwise it fires it directly. This causes one awaiting task to</span>\n<span class=\"sd\">    receive a result. If self.waiting_deferreds is still not empty, new __anext__() is</span>\n<span class=\"sd\">    called and self.anext_deferred is populated.</span>\n<span class=\"sd\">    3.2. _errback() checks the exception class. If it's StopAsyncIteration it means</span>\n<span class=\"sd\">    self.aiterator is exhausted and so it sets self.finished and fires all</span>\n<span class=\"sd\">    self.waiting_deferreds. Other exceptions are propagated.</span>\n<span class=\"sd\">    4. If __next__() is called after __anext__() was handled, then if self.finished is</span>\n<span class=\"sd\">    True, it raises StopIteration, otherwise it acts like in step 2, but if</span>\n<span class=\"sd\">    self.anext_deferred is now empty is also populates it with a new __anext__().</span>\n\n<span class=\"sd\">    Note that CooperativeTask ignores the value returned from the Deferred that it waits</span>\n<span class=\"sd\">    for, so we fire them with None when needed.</span>\n\n<span class=\"sd\">    It may be possible to write an async iterator-aware replacement for</span>\n<span class=\"sd\">    Cooperator/CooperativeTask and use it instead of this adapter to achieve the same</span>\n<span class=\"sd\">    goal.</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">aiterable</span><span class=\"p\">:</span> <span class=\"n\">AsyncIterable</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">],</span>\n        <span class=\"nb\">callable</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">Concatenate</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">,</span> <span class=\"n\">_P</span><span class=\"p\">],</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span>\n        <span class=\"o\">*</span><span class=\"n\">callable_args</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">callable_kwargs</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aiterator</span><span class=\"p\">:</span> <span class=\"n\">AsyncIterator</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">aiterable</span><span class=\"o\">.</span><span class=\"fm\">__aiter__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">callable</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">Concatenate</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">,</span> <span class=\"n\">_P</span><span class=\"p\">],</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"nb\">callable</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">callable_args</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">callable_args</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">callable_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">callable_kwargs</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">finished</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">waiting_deferreds</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">anext_deferred</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_callback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">:</span> <span class=\"n\">_T</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\"># This gets called when the result from aiterator.__anext__() is available.</span>\n        <span class=\"c1\"># It calls the callable on it and sends the result to the oldest waiting Deferred</span>\n        <span class=\"c1\"># (by chaining if the result is a Deferred too or by firing if not).</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">anext_deferred</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">callable_result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">callable</span><span class=\"p\">(</span>\n            <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">callable_args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">callable_kwargs</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">waiting_deferreds</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">callable_result</span><span class=\"p\">,</span> <span class=\"n\">Deferred</span><span class=\"p\">):</span>\n            <span class=\"n\">callable_result</span><span class=\"o\">.</span><span class=\"n\">chainDeferred</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">callback</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">waiting_deferreds</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_call_anext</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_errback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">failure</span><span class=\"p\">:</span> <span class=\"n\">Failure</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\"># This gets called on any exceptions in aiterator.__anext__().</span>\n        <span class=\"c1\"># It handles StopAsyncIteration by stopping the iteration and reraises all others.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">anext_deferred</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">failure</span><span class=\"o\">.</span><span class=\"n\">trap</span><span class=\"p\">(</span><span class=\"ne\">StopAsyncIteration</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">finished</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">waiting_deferreds</span><span class=\"p\">:</span>\n            <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">callback</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_call_anext</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\"># This starts waiting for the next result from aiterator.</span>\n        <span class=\"c1\"># If aiterator is exhausted, _errback will be called.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">anext_deferred</span> <span class=\"o\">=</span> <span class=\"n\">deferred_from_coro</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aiterator</span><span class=\"o\">.</span><span class=\"fm\">__anext__</span><span class=\"p\">())</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">anext_deferred</span><span class=\"o\">.</span><span class=\"n\">addCallbacks</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_callback</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errback</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__next__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]:</span>\n        <span class=\"c1\"># This puts a new Deferred into self.waiting_deferreds and returns it.</span>\n        <span class=\"c1\"># It also calls __anext__() if needed.</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">finished</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">StopIteration</span>\n        <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Deferred</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">waiting_deferreds</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">anext_deferred</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_call_anext</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">d</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">parallel_async</span><span class=\"p\">(</span>\n    <span class=\"n\">async_iterable</span><span class=\"p\">:</span> <span class=\"n\">AsyncIterable</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">],</span>\n    <span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n    <span class=\"nb\">callable</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">Concatenate</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">,</span> <span class=\"n\">_P</span><span class=\"p\">],</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span>\n    <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span>\n    <span class=\"o\">**</span><span class=\"n\">named</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]]:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Like ``parallel`` but for async iterators\"\"\"</span>\n    <span class=\"n\">coop</span> <span class=\"o\">=</span> <span class=\"n\">Cooperator</span><span class=\"p\">()</span>\n    <span class=\"n\">work</span><span class=\"p\">:</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">_AsyncCooperatorAdapter</span><span class=\"p\">(</span>\n        <span class=\"n\">async_iterable</span><span class=\"p\">,</span> <span class=\"nb\">callable</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">named</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">dl</span><span class=\"p\">:</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]]</span> <span class=\"o\">=</span> <span class=\"n\">DeferredList</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"n\">coop</span><span class=\"o\">.</span><span class=\"n\">coiterate</span><span class=\"p\">(</span><span class=\"n\">work</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">)]</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">dl</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">process_chain</span><span class=\"p\">(</span>\n    <span class=\"n\">callbacks</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">Concatenate</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">,</span> <span class=\"n\">_P</span><span class=\"p\">],</span> <span class=\"n\">_T</span><span class=\"p\">]],</span>\n    <span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"n\">_T</span><span class=\"p\">,</span>\n    <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span>\n    <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">]:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Return a Deferred built by chaining the given callbacks\"\"\"</span>\n    <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Deferred</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">callbacks</span><span class=\"p\">:</span>\n        <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">addCallback</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">)</span>\n    <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">callback</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">d</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">process_chain_both</span><span class=\"p\">(</span>\n    <span class=\"n\">callbacks</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">Concatenate</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">,</span> <span class=\"n\">_P</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]],</span>\n    <span class=\"n\">errbacks</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">Concatenate</span><span class=\"p\">[</span><span class=\"n\">Failure</span><span class=\"p\">,</span> <span class=\"n\">_P</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]],</span>\n    <span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span>\n    <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span>\n    <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Deferred</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Return a Deferred built by chaining the given callbacks and errbacks\"\"\"</span>\n    <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"process_chain_both() is deprecated and will be removed in a future\"</span>\n        <span class=\"s2\">\" Scrapy version.\"</span><span class=\"p\">,</span>\n        <span class=\"n\">ScrapyDeprecationWarning</span><span class=\"p\">,</span>\n        <span class=\"n\">stacklevel</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">Deferred</span> <span class=\"o\">=</span> <span class=\"n\">Deferred</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">cb</span><span class=\"p\">,</span> <span class=\"n\">eb</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">callbacks</span><span class=\"p\">,</span> <span class=\"n\">errbacks</span><span class=\"p\">):</span>\n        <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">addCallback</span><span class=\"p\">(</span><span class=\"n\">cb</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">)</span>\n        <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">addErrback</span><span class=\"p\">(</span><span class=\"n\">eb</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"n\">failure</span><span class=\"o\">.</span><span class=\"n\">Failure</span><span class=\"p\">):</span>\n        <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">errback</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">callback</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">d</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">process_parallel</span><span class=\"p\">(</span>\n    <span class=\"n\">callbacks</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">Concatenate</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">,</span> <span class=\"n\">_P</span><span class=\"p\">],</span> <span class=\"n\">_T2</span><span class=\"p\">]],</span>\n    <span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"n\">_T</span><span class=\"p\">,</span>\n    <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span>\n    <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">_T2</span><span class=\"p\">]]:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Return a Deferred with the output of all successful calls to the given</span>\n<span class=\"sd\">    callbacks</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">dfds</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">defer</span><span class=\"o\">.</span><span class=\"n\">succeed</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">addCallback</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">callbacks</span><span class=\"p\">]</span>\n    <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">_T2</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"n\">DeferredList</span><span class=\"p\">(</span>\n        <span class=\"n\">dfds</span><span class=\"p\">,</span> <span class=\"n\">fireOnOneErrback</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">consumeErrors</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">d2</span><span class=\"p\">:</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">_T2</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">addCallback</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">r</span><span class=\"p\">])</span>\n    <span class=\"n\">d2</span><span class=\"o\">.</span><span class=\"n\">addErrback</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">subFailure</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">d2</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">iter_errback</span><span class=\"p\">(</span>\n    <span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">],</span>\n    <span class=\"n\">errback</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">Concatenate</span><span class=\"p\">[</span><span class=\"n\">Failure</span><span class=\"p\">,</span> <span class=\"n\">_P</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">],</span>\n    <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span>\n    <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">]:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Wraps an iterable calling an errback if an error is caught while</span>\n<span class=\"sd\">    iterating it.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">StopIteration</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n            <span class=\"n\">errback</span><span class=\"p\">(</span><span class=\"n\">failure</span><span class=\"o\">.</span><span class=\"n\">Failure</span><span class=\"p\">(),</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">aiter_errback</span><span class=\"p\">(</span>\n    <span class=\"n\">aiterable</span><span class=\"p\">:</span> <span class=\"n\">AsyncIterable</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">],</span>\n    <span class=\"n\">errback</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">Concatenate</span><span class=\"p\">[</span><span class=\"n\">Failure</span><span class=\"p\">,</span> <span class=\"n\">_P</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">],</span>\n    <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span>\n    <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">AsyncIterable</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">]:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Wraps an async iterable calling an errback if an error is caught while</span>\n<span class=\"sd\">    iterating it. Similar to scrapy.utils.defer.iter_errback()</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">aiterable</span><span class=\"o\">.</span><span class=\"fm\">__aiter__</span><span class=\"p\">()</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"k\">await</span> <span class=\"n\">it</span><span class=\"o\">.</span><span class=\"fm\">__anext__</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">StopAsyncIteration</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n            <span class=\"n\">errback</span><span class=\"p\">(</span><span class=\"n\">failure</span><span class=\"o\">.</span><span class=\"n\">Failure</span><span class=\"p\">(),</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">_CT</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s2\">\"_CT\"</span><span class=\"p\">,</span> <span class=\"n\">bound</span><span class=\"o\">=</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Awaitable</span><span class=\"p\">,</span> <span class=\"n\">CoroutineType</span><span class=\"p\">,</span> <span class=\"n\">Future</span><span class=\"p\">])</span>\n\n\n<span class=\"nd\">@overload</span>\n<span class=\"k\">def</span> <span class=\"nf\">deferred_from_coro</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">:</span> <span class=\"n\">_CT</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Deferred</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n\n\n<span class=\"nd\">@overload</span>\n<span class=\"k\">def</span> <span class=\"nf\">deferred_from_coro</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">:</span> <span class=\"n\">_T</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">_T</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">deferred_from_coro</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">:</span> <span class=\"n\">_T</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Deferred</span><span class=\"p\">,</span> <span class=\"n\">_T</span><span class=\"p\">]:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Converts a coroutine into a Deferred, or returns the object as is if it isn't a coroutine\"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">Deferred</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">o</span>\n    <span class=\"k\">if</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">isfuture</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">isawaitable</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_asyncio_reactor_installed</span><span class=\"p\">():</span>\n            <span class=\"c1\"># wrapping the coroutine directly into a Deferred, this doesn't work correctly with coroutines</span>\n            <span class=\"c1\"># that use asyncio, e.g. \"await asyncio.sleep(1)\"</span>\n            <span class=\"k\">return</span> <span class=\"n\">ensureDeferred</span><span class=\"p\">(</span><span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">Coroutine</span><span class=\"p\">[</span><span class=\"n\">Deferred</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">o</span><span class=\"p\">))</span>\n        <span class=\"c1\"># wrapping the coroutine into a Future and then into a Deferred, this requires AsyncioSelectorReactor</span>\n        <span class=\"n\">event_loop</span> <span class=\"o\">=</span> <span class=\"n\">_get_asyncio_event_loop</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">Deferred</span><span class=\"o\">.</span><span class=\"n\">fromFuture</span><span class=\"p\">(</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">ensure_future</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">event_loop</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">o</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">deferred_f_from_coro_f</span><span class=\"p\">(</span>\n    <span class=\"n\">coro_f</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">_P</span><span class=\"p\">,</span> <span class=\"n\">Coroutine</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">_T</span><span class=\"p\">]]</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">_P</span><span class=\"p\">,</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">]]:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Converts a coroutine function into a function that returns a Deferred.</span>\n\n<span class=\"sd\">    The coroutine function will be called at the time when the wrapper is called. Wrapper args will be passed to it.</span>\n<span class=\"sd\">    This is useful for callback chains, as callback functions are called with the previous callback result.</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"nd\">@wraps</span><span class=\"p\">(</span><span class=\"n\">coro_f</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">coro_args</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">coro_kwargs</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">deferred_from_coro</span><span class=\"p\">(</span><span class=\"n\">coro_f</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">coro_args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">coro_kwargs</span><span class=\"p\">))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">f</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">maybeDeferred_coro</span><span class=\"p\">(</span>\n    <span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"n\">_P</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">:</span> <span class=\"n\">_P</span><span class=\"o\">.</span><span class=\"n\">kwargs</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Copy of defer.maybeDeferred that also converts coroutines to Deferreds.\"\"\"</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>  <span class=\"c1\"># noqa: E722,B001</span>\n        <span class=\"k\">return</span> <span class=\"n\">defer</span><span class=\"o\">.</span><span class=\"n\">fail</span><span class=\"p\">(</span><span class=\"n\">failure</span><span class=\"o\">.</span><span class=\"n\">Failure</span><span class=\"p\">(</span><span class=\"n\">captureVars</span><span class=\"o\">=</span><span class=\"n\">Deferred</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">))</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">Deferred</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n    <span class=\"k\">if</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">isfuture</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">isawaitable</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">deferred_from_coro</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">failure</span><span class=\"o\">.</span><span class=\"n\">Failure</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">defer</span><span class=\"o\">.</span><span class=\"n\">fail</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">defer</span><span class=\"o\">.</span><span class=\"n\">succeed</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"deferred_to_future\"><a class=\"viewcode-back\" href=\"../../../topics/asyncio.html#scrapy.utils.defer.deferred_to_future\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">deferred_to_future</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Future</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">]:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    .. versionadded:: 2.6.0</span>\n\n<span class=\"sd\">    Return an :class:`asyncio.Future` object that wraps *d*.</span>\n\n<span class=\"sd\">    When :ref:`using the asyncio reactor &lt;install-asyncio&gt;`, you cannot await</span>\n<span class=\"sd\">    on :class:`~twisted.internet.defer.Deferred` objects from :ref:`Scrapy</span>\n<span class=\"sd\">    callables defined as coroutines &lt;coroutine-support&gt;`, you can only await on</span>\n<span class=\"sd\">    ``Future`` objects. Wrapping ``Deferred`` objects into ``Future`` objects</span>\n<span class=\"sd\">    allows you to wait on them::</span>\n\n<span class=\"sd\">        class MySpider(Spider):</span>\n<span class=\"sd\">            ...</span>\n<span class=\"sd\">            async def parse(self, response):</span>\n<span class=\"sd\">                additional_request = scrapy.Request('https://example.org/price')</span>\n<span class=\"sd\">                deferred = self.crawler.engine.download(additional_request)</span>\n<span class=\"sd\">                additional_response = await deferred_to_future(deferred)</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">asFuture</span><span class=\"p\">(</span><span class=\"n\">_get_asyncio_event_loop</span><span class=\"p\">())</span></div>\n\n\n<div class=\"viewcode-block\" id=\"maybe_deferred_to_future\"><a class=\"viewcode-back\" href=\"../../../topics/asyncio.html#scrapy.utils.defer.maybe_deferred_to_future\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">maybe_deferred_to_future</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Deferred</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">],</span> <span class=\"n\">Future</span><span class=\"p\">[</span><span class=\"n\">_T</span><span class=\"p\">]]:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    .. versionadded:: 2.6.0</span>\n\n<span class=\"sd\">    Return *d* as an object that can be awaited from a :ref:`Scrapy callable</span>\n<span class=\"sd\">    defined as a coroutine &lt;coroutine-support&gt;`.</span>\n\n<span class=\"sd\">    What you can await in Scrapy callables defined as coroutines depends on the</span>\n<span class=\"sd\">    value of :setting:`TWISTED_REACTOR`:</span>\n\n<span class=\"sd\">    -   When not using the asyncio reactor, you can only await on</span>\n<span class=\"sd\">        :class:`~twisted.internet.defer.Deferred` objects.</span>\n\n<span class=\"sd\">    -   When :ref:`using the asyncio reactor &lt;install-asyncio&gt;`, you can only</span>\n<span class=\"sd\">        await on :class:`asyncio.Future` objects.</span>\n\n<span class=\"sd\">    If you want to write code that uses ``Deferred`` objects but works with any</span>\n<span class=\"sd\">    reactor, use this function on all ``Deferred`` objects::</span>\n\n<span class=\"sd\">        class MySpider(Spider):</span>\n<span class=\"sd\">            ...</span>\n<span class=\"sd\">            async def parse(self, response):</span>\n<span class=\"sd\">                additional_request = scrapy.Request('https://example.org/price')</span>\n<span class=\"sd\">                deferred = self.crawler.engine.download(additional_request)</span>\n<span class=\"sd\">                additional_response = await maybe_deferred_to_future(deferred)</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_asyncio_reactor_installed</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"n\">d</span>\n    <span class=\"k\">return</span> <span class=\"n\">deferred_to_future</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span></div>\n</pre>"
    },
    {
      "type": "text",
      "content": "© Copyright Scrapy developers.\n      "
    },
    {
      "type": "code",
      "content": "<code>e376c0b3</code>"
    }
  ]
}