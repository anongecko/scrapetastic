{
  "url": "https://docs.scrapy.org/en/latest/_modules/scrapy/core/scheduler.html",
  "title": "scrapy.core.scheduler — Scrapy 2.11.2 documentation",
  "content": [
    {
      "type": "text",
      "content": "First steps"
    },
    {
      "type": "text",
      "content": "Scrapy at a glance"
    },
    {
      "type": "text",
      "content": "Installation guide"
    },
    {
      "type": "text",
      "content": "Scrapy Tutorial"
    },
    {
      "type": "text",
      "content": "Examples"
    },
    {
      "type": "text",
      "content": "Basic concepts"
    },
    {
      "type": "text",
      "content": "Command line tool"
    },
    {
      "type": "text",
      "content": "Spiders"
    },
    {
      "type": "text",
      "content": "Selectors"
    },
    {
      "type": "text",
      "content": "Items"
    },
    {
      "type": "text",
      "content": "Item Loaders"
    },
    {
      "type": "text",
      "content": "Scrapy shell"
    },
    {
      "type": "text",
      "content": "Item Pipeline"
    },
    {
      "type": "text",
      "content": "Feed exports"
    },
    {
      "type": "text",
      "content": "Requests and Responses"
    },
    {
      "type": "text",
      "content": "Link Extractors"
    },
    {
      "type": "text",
      "content": "Settings"
    },
    {
      "type": "text",
      "content": "Exceptions"
    },
    {
      "type": "text",
      "content": "Built-in services"
    },
    {
      "type": "text",
      "content": "Logging"
    },
    {
      "type": "text",
      "content": "Stats Collection"
    },
    {
      "type": "text",
      "content": "Sending e-mail"
    },
    {
      "type": "text",
      "content": "Telnet Console"
    },
    {
      "type": "text",
      "content": "Solving specific problems"
    },
    {
      "type": "text",
      "content": "Frequently Asked Questions"
    },
    {
      "type": "text",
      "content": "Debugging Spiders"
    },
    {
      "type": "text",
      "content": "Spiders Contracts"
    },
    {
      "type": "text",
      "content": "Common Practices"
    },
    {
      "type": "text",
      "content": "Broad Crawls"
    },
    {
      "type": "text",
      "content": "Using your browser’s Developer Tools for scraping"
    },
    {
      "type": "text",
      "content": "Selecting dynamically-loaded content"
    },
    {
      "type": "text",
      "content": "Debugging memory leaks"
    },
    {
      "type": "text",
      "content": "Downloading and processing files and images"
    },
    {
      "type": "text",
      "content": "Deploying Spiders"
    },
    {
      "type": "text",
      "content": "AutoThrottle extension"
    },
    {
      "type": "text",
      "content": "Benchmarking"
    },
    {
      "type": "text",
      "content": "Jobs: pausing and resuming crawls"
    },
    {
      "type": "text",
      "content": "Coroutines"
    },
    {
      "type": "text",
      "content": "asyncio"
    },
    {
      "type": "text",
      "content": "Extending Scrapy"
    },
    {
      "type": "text",
      "content": "Architecture overview"
    },
    {
      "type": "text",
      "content": "Add-ons"
    },
    {
      "type": "text",
      "content": "Downloader Middleware"
    },
    {
      "type": "text",
      "content": "Spider Middleware"
    },
    {
      "type": "text",
      "content": "Extensions"
    },
    {
      "type": "text",
      "content": "Signals"
    },
    {
      "type": "text",
      "content": "Scheduler"
    },
    {
      "type": "text",
      "content": "Item Exporters"
    },
    {
      "type": "text",
      "content": "Components"
    },
    {
      "type": "text",
      "content": "Core API"
    },
    {
      "type": "text",
      "content": "All the rest"
    },
    {
      "type": "text",
      "content": "Release notes"
    },
    {
      "type": "text",
      "content": "Contributing to Scrapy"
    },
    {
      "type": "text",
      "content": "Versioning and API stability"
    },
    {
      "type": "text",
      "content": " »"
    },
    {
      "type": "text",
      "content": "Module code"
    },
    {
      "type": "text",
      "content": "scrapy.core.scheduler"
    },
    {
      "type": "text",
      "content": "\n      "
    },
    {
      "type": "text",
      "content": "Source code for scrapy.core.scheduler"
    },
    {
      "type": "code",
      "content": "<pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">annotations</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">abc</span> <span class=\"kn\">import</span> <span class=\"n\">abstractmethod</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">TYPE_CHECKING</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Type</span><span class=\"p\">,</span> <span class=\"n\">TypeVar</span><span class=\"p\">,</span> <span class=\"n\">cast</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet.defer</span> <span class=\"kn\">import</span> <span class=\"n\">Deferred</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">scrapy.crawler</span> <span class=\"kn\">import</span> <span class=\"n\">Crawler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scrapy.dupefilters</span> <span class=\"kn\">import</span> <span class=\"n\">BaseDupeFilter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scrapy.http.request</span> <span class=\"kn\">import</span> <span class=\"n\">Request</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scrapy.spiders</span> <span class=\"kn\">import</span> <span class=\"n\">Spider</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scrapy.statscollectors</span> <span class=\"kn\">import</span> <span class=\"n\">StatsCollector</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scrapy.utils.job</span> <span class=\"kn\">import</span> <span class=\"n\">job_dir</span>\n<span class=\"kn\">from</span> <span class=\"nn\">scrapy.utils.misc</span> <span class=\"kn\">import</span> <span class=\"n\">create_instance</span><span class=\"p\">,</span> <span class=\"n\">load_object</span>\n\n<span class=\"k\">if</span> <span class=\"n\">TYPE_CHECKING</span><span class=\"p\">:</span>\n    <span class=\"c1\"># typing.Self requires Python 3.11</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">typing_extensions</span> <span class=\"kn\">import</span> <span class=\"n\">Self</span>\n\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BaseSchedulerMeta</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Metaclass to check scheduler classes against the necessary interface</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__instancecheck__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"fm\">__subclasscheck__</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__subclasscheck__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">subclass</span><span class=\"p\">:</span> <span class=\"nb\">type</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">subclass</span><span class=\"p\">,</span> <span class=\"s2\">\"has_pending_requests\"</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">callable</span><span class=\"p\">(</span><span class=\"n\">subclass</span><span class=\"o\">.</span><span class=\"n\">has_pending_requests</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">subclass</span><span class=\"p\">,</span> <span class=\"s2\">\"enqueue_request\"</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">callable</span><span class=\"p\">(</span><span class=\"n\">subclass</span><span class=\"o\">.</span><span class=\"n\">enqueue_request</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">subclass</span><span class=\"p\">,</span> <span class=\"s2\">\"next_request\"</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">callable</span><span class=\"p\">(</span><span class=\"n\">subclass</span><span class=\"o\">.</span><span class=\"n\">next_request</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"BaseScheduler\"><a class=\"viewcode-back\" href=\"../../../topics/scheduler.html#scrapy.core.scheduler.BaseScheduler\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">BaseScheduler</span><span class=\"p\">(</span><span class=\"n\">metaclass</span><span class=\"o\">=</span><span class=\"n\">BaseSchedulerMeta</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    The scheduler component is responsible for storing requests received from</span>\n<span class=\"sd\">    the engine, and feeding them back upon request (also to the engine).</span>\n\n<span class=\"sd\">    The original sources of said requests are:</span>\n\n<span class=\"sd\">    * Spider: ``start_requests`` method, requests created for URLs in the ``start_urls`` attribute, request callbacks</span>\n<span class=\"sd\">    * Spider middleware: ``process_spider_output`` and ``process_spider_exception`` methods</span>\n<span class=\"sd\">    * Downloader middleware: ``process_request``, ``process_response`` and ``process_exception`` methods</span>\n\n<span class=\"sd\">    The order in which the scheduler returns its stored requests (via the ``next_request`` method)</span>\n<span class=\"sd\">    plays a great part in determining the order in which those requests are downloaded.</span>\n\n<span class=\"sd\">    The methods defined in this class constitute the minimal interface that the Scrapy engine will interact with.</span>\n<span class=\"sd\">    \"\"\"</span>\n\n<div class=\"viewcode-block\" id=\"BaseScheduler.from_crawler\"><a class=\"viewcode-back\" href=\"../../../topics/scheduler.html#scrapy.core.scheduler.BaseScheduler.from_crawler\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_crawler</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">crawler</span><span class=\"p\">:</span> <span class=\"n\">Crawler</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Self</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Factory method which receives the current :class:`~scrapy.crawler.Crawler` object as argument.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"BaseScheduler.open\"><a class=\"viewcode-back\" href=\"../../../topics/scheduler.html#scrapy.core.scheduler.BaseScheduler.open\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"p\">:</span> <span class=\"n\">Spider</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Deferred</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Called when the spider is opened by the engine. It receives the spider</span>\n<span class=\"sd\">        instance as argument and it's useful to execute initialization code.</span>\n\n<span class=\"sd\">        :param spider: the spider object for the current crawl</span>\n<span class=\"sd\">        :type spider: :class:`~scrapy.spiders.Spider`</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">pass</span></div>\n\n<div class=\"viewcode-block\" id=\"BaseScheduler.close\"><a class=\"viewcode-back\" href=\"../../../topics/scheduler.html#scrapy.core.scheduler.BaseScheduler.close\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">reason</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Deferred</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Called when the spider is closed by the engine. It receives the reason why the crawl</span>\n<span class=\"sd\">        finished as argument and it's useful to execute cleaning code.</span>\n\n<span class=\"sd\">        :param reason: a string which describes the reason why the spider was closed</span>\n<span class=\"sd\">        :type reason: :class:`str`</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">pass</span></div>\n\n<div class=\"viewcode-block\" id=\"BaseScheduler.has_pending_requests\"><a class=\"viewcode-back\" href=\"../../../topics/scheduler.html#scrapy.core.scheduler.BaseScheduler.has_pending_requests\">[docs]</a>    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">has_pending_requests</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        ``True`` if the scheduler has enqueued requests, ``False`` otherwise</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"BaseScheduler.enqueue_request\"><a class=\"viewcode-back\" href=\"../../../topics/scheduler.html#scrapy.core.scheduler.BaseScheduler.enqueue_request\">[docs]</a>    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">enqueue_request</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Process a request received by the engine.</span>\n\n<span class=\"sd\">        Return ``True`` if the request is stored correctly, ``False`` otherwise.</span>\n\n<span class=\"sd\">        If ``False``, the engine will fire a ``request_dropped`` signal, and</span>\n<span class=\"sd\">        will not make further attempts to schedule the request at a later time.</span>\n<span class=\"sd\">        For reference, the default Scrapy scheduler returns ``False`` when the</span>\n<span class=\"sd\">        request is rejected by the dupefilter.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"BaseScheduler.next_request\"><a class=\"viewcode-back\" href=\"../../../topics/scheduler.html#scrapy.core.scheduler.BaseScheduler.next_request\">[docs]</a>    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">next_request</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Request</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Return the next :class:`~scrapy.http.Request` to be processed, or ``None``</span>\n<span class=\"sd\">        to indicate that there are no requests to be considered ready at the moment.</span>\n\n<span class=\"sd\">        Returning ``None`` implies that no request from the scheduler will be sent</span>\n<span class=\"sd\">        to the downloader in the current reactor cycle. The engine will continue</span>\n<span class=\"sd\">        calling ``next_request`` until ``has_pending_requests`` is ``False``.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span></div></div>\n\n\n<span class=\"n\">SchedulerTV</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s2\">\"SchedulerTV\"</span><span class=\"p\">,</span> <span class=\"n\">bound</span><span class=\"o\">=</span><span class=\"s2\">\"Scheduler\"</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"Scheduler\"><a class=\"viewcode-back\" href=\"../../../topics/scheduler.html#scrapy.core.scheduler.Scheduler\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Scheduler</span><span class=\"p\">(</span><span class=\"n\">BaseScheduler</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Default Scrapy scheduler. This implementation also handles duplication</span>\n<span class=\"sd\">    filtering via the :setting:`dupefilter &lt;DUPEFILTER_CLASS&gt;`.</span>\n\n<span class=\"sd\">    This scheduler stores requests into several priority queues (defined by the</span>\n<span class=\"sd\">    :setting:`SCHEDULER_PRIORITY_QUEUE` setting). In turn, said priority queues</span>\n<span class=\"sd\">    are backed by either memory or disk based queues (respectively defined by the</span>\n<span class=\"sd\">    :setting:`SCHEDULER_MEMORY_QUEUE` and :setting:`SCHEDULER_DISK_QUEUE` settings).</span>\n\n<span class=\"sd\">    Request prioritization is almost entirely delegated to the priority queue. The only</span>\n<span class=\"sd\">    prioritization performed by this scheduler is using the disk-based queue if present</span>\n<span class=\"sd\">    (i.e. if the :setting:`JOBDIR` setting is defined) and falling back to the memory-based</span>\n<span class=\"sd\">    queue if a serialization error occurs. If the disk queue is not present, the memory one</span>\n<span class=\"sd\">    is used directly.</span>\n\n<span class=\"sd\">    :param dupefilter: An object responsible for checking and filtering duplicate requests.</span>\n<span class=\"sd\">                       The value for the :setting:`DUPEFILTER_CLASS` setting is used by default.</span>\n<span class=\"sd\">    :type dupefilter: :class:`scrapy.dupefilters.BaseDupeFilter` instance or similar:</span>\n<span class=\"sd\">                      any class that implements the `BaseDupeFilter` interface</span>\n\n<span class=\"sd\">    :param jobdir: The path of a directory to be used for persisting the crawl's state.</span>\n<span class=\"sd\">                   The value for the :setting:`JOBDIR` setting is used by default.</span>\n<span class=\"sd\">                   See :ref:`topics-jobs`.</span>\n<span class=\"sd\">    :type jobdir: :class:`str` or ``None``</span>\n\n<span class=\"sd\">    :param dqclass: A class to be used as persistent request queue.</span>\n<span class=\"sd\">                    The value for the :setting:`SCHEDULER_DISK_QUEUE` setting is used by default.</span>\n<span class=\"sd\">    :type dqclass: class</span>\n\n<span class=\"sd\">    :param mqclass: A class to be used as non-persistent request queue.</span>\n<span class=\"sd\">                    The value for the :setting:`SCHEDULER_MEMORY_QUEUE` setting is used by default.</span>\n<span class=\"sd\">    :type mqclass: class</span>\n\n<span class=\"sd\">    :param logunser: A boolean that indicates whether or not unserializable requests should be logged.</span>\n<span class=\"sd\">                     The value for the :setting:`SCHEDULER_DEBUG` setting is used by default.</span>\n<span class=\"sd\">    :type logunser: bool</span>\n\n<span class=\"sd\">    :param stats: A stats collector object to record stats about the request scheduling process.</span>\n<span class=\"sd\">                  The value for the :setting:`STATS_CLASS` setting is used by default.</span>\n<span class=\"sd\">    :type stats: :class:`scrapy.statscollectors.StatsCollector` instance or similar:</span>\n<span class=\"sd\">                 any class that implements the `StatsCollector` interface</span>\n\n<span class=\"sd\">    :param pqclass: A class to be used as priority queue for requests.</span>\n<span class=\"sd\">                    The value for the :setting:`SCHEDULER_PRIORITY_QUEUE` setting is used by default.</span>\n<span class=\"sd\">    :type pqclass: class</span>\n\n<span class=\"sd\">    :param crawler: The crawler object corresponding to the current crawl.</span>\n<span class=\"sd\">    :type crawler: :class:`scrapy.crawler.Crawler`</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">dupefilter</span><span class=\"p\">:</span> <span class=\"n\">BaseDupeFilter</span><span class=\"p\">,</span>\n        <span class=\"n\">jobdir</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">dqclass</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">mqclass</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">logunser</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">stats</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">StatsCollector</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">pqclass</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">crawler</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Crawler</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">BaseDupeFilter</span> <span class=\"o\">=</span> <span class=\"n\">dupefilter</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dqdir</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dqdir</span><span class=\"p\">(</span><span class=\"n\">jobdir</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pqclass</span> <span class=\"o\">=</span> <span class=\"n\">pqclass</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dqclass</span> <span class=\"o\">=</span> <span class=\"n\">dqclass</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mqclass</span> <span class=\"o\">=</span> <span class=\"n\">mqclass</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logunser</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"n\">logunser</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">StatsCollector</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">stats</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">crawler</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Crawler</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">crawler</span>\n\n<div class=\"viewcode-block\" id=\"Scheduler.from_crawler\"><a class=\"viewcode-back\" href=\"../../../topics/scheduler.html#scrapy.core.scheduler.Scheduler.from_crawler\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_crawler</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">SchedulerTV</span><span class=\"p\">],</span> <span class=\"n\">crawler</span><span class=\"p\">:</span> <span class=\"n\">Crawler</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">SchedulerTV</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Factory method, initializes the scheduler with arguments taken from the crawl settings</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">dupefilter_cls</span> <span class=\"o\">=</span> <span class=\"n\">load_object</span><span class=\"p\">(</span><span class=\"n\">crawler</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"p\">[</span><span class=\"s2\">\"DUPEFILTER_CLASS\"</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"p\">(</span>\n            <span class=\"n\">dupefilter</span><span class=\"o\">=</span><span class=\"n\">create_instance</span><span class=\"p\">(</span><span class=\"n\">dupefilter_cls</span><span class=\"p\">,</span> <span class=\"n\">crawler</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"p\">,</span> <span class=\"n\">crawler</span><span class=\"p\">),</span>\n            <span class=\"n\">jobdir</span><span class=\"o\">=</span><span class=\"n\">job_dir</span><span class=\"p\">(</span><span class=\"n\">crawler</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"p\">),</span>\n            <span class=\"n\">dqclass</span><span class=\"o\">=</span><span class=\"n\">load_object</span><span class=\"p\">(</span><span class=\"n\">crawler</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"p\">[</span><span class=\"s2\">\"SCHEDULER_DISK_QUEUE\"</span><span class=\"p\">]),</span>\n            <span class=\"n\">mqclass</span><span class=\"o\">=</span><span class=\"n\">load_object</span><span class=\"p\">(</span><span class=\"n\">crawler</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"p\">[</span><span class=\"s2\">\"SCHEDULER_MEMORY_QUEUE\"</span><span class=\"p\">]),</span>\n            <span class=\"n\">logunser</span><span class=\"o\">=</span><span class=\"n\">crawler</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">getbool</span><span class=\"p\">(</span><span class=\"s2\">\"SCHEDULER_DEBUG\"</span><span class=\"p\">),</span>\n            <span class=\"n\">stats</span><span class=\"o\">=</span><span class=\"n\">crawler</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"p\">,</span>\n            <span class=\"n\">pqclass</span><span class=\"o\">=</span><span class=\"n\">load_object</span><span class=\"p\">(</span><span class=\"n\">crawler</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"p\">[</span><span class=\"s2\">\"SCHEDULER_PRIORITY_QUEUE\"</span><span class=\"p\">]),</span>\n            <span class=\"n\">crawler</span><span class=\"o\">=</span><span class=\"n\">crawler</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Scheduler.has_pending_requests\"><a class=\"viewcode-back\" href=\"../../../topics/scheduler.html#scrapy.core.scheduler.Scheduler.has_pending_requests\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">has_pending_requests</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span></div>\n\n<div class=\"viewcode-block\" id=\"Scheduler.open\"><a class=\"viewcode-back\" href=\"../../../topics/scheduler.html#scrapy.core.scheduler.Scheduler.open\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"p\">:</span> <span class=\"n\">Spider</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Deferred</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        (1) initialize the memory queue</span>\n<span class=\"sd\">        (2) initialize the disk queue if the ``jobdir`` attribute is a valid directory</span>\n<span class=\"sd\">        (3) return the result of the dupefilter's ``open`` method</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">spider</span> <span class=\"o\">=</span> <span class=\"n\">spider</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mqs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mq</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dqs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dq</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dqdir</span> <span class=\"k\">else</span> <span class=\"kc\">None</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Scheduler.close\"><a class=\"viewcode-back\" href=\"../../../topics/scheduler.html#scrapy.core.scheduler.Scheduler.close\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">reason</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Deferred</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        (1) dump pending requests to disk if there is a disk queue</span>\n<span class=\"sd\">        (2) return the result of the dupefilter's ``close`` method</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dqs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dqs</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dqdir</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_write_dqs_state</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dqdir</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">reason</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Scheduler.enqueue_request\"><a class=\"viewcode-back\" href=\"../../../topics/scheduler.html#scrapy.core.scheduler.Scheduler.enqueue_request\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">enqueue_request</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Unless the received request is filtered out by the Dupefilter, attempt to push</span>\n<span class=\"sd\">        it into the disk queue, falling back to pushing it into the memory queue.</span>\n\n<span class=\"sd\">        Increment the appropriate stats, such as: ``scheduler/enqueued``,</span>\n<span class=\"sd\">        ``scheduler/enqueued/disk``, ``scheduler/enqueued/memory``.</span>\n\n<span class=\"sd\">        Return ``True`` if the request was stored successfully, ``False`` otherwise.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">dont_filter</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">request_seen</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">spider</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">dqok</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dqpush</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stats</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">dqok</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"o\">.</span><span class=\"n\">inc_value</span><span class=\"p\">(</span><span class=\"s2\">\"scheduler/enqueued/disk\"</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">spider</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mqpush</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"o\">.</span><span class=\"n\">inc_value</span><span class=\"p\">(</span><span class=\"s2\">\"scheduler/enqueued/memory\"</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">spider</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"o\">.</span><span class=\"n\">inc_value</span><span class=\"p\">(</span><span class=\"s2\">\"scheduler/enqueued\"</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">spider</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"Scheduler.next_request\"><a class=\"viewcode-back\" href=\"../../../topics/scheduler.html#scrapy.core.scheduler.Scheduler.next_request\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">next_request</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Request</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Return a :class:`~scrapy.http.Request` object from the memory queue,</span>\n<span class=\"sd\">        falling back to the disk queue if the memory queue is empty.</span>\n<span class=\"sd\">        Return ``None`` if there are no more enqueued requests.</span>\n\n<span class=\"sd\">        Increment the appropriate stats, such as: ``scheduler/dequeued``,</span>\n<span class=\"sd\">        ``scheduler/dequeued/disk``, ``scheduler/dequeued/memory``.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Request</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mqs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n        <span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stats</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">request</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"o\">.</span><span class=\"n\">inc_value</span><span class=\"p\">(</span><span class=\"s2\">\"scheduler/dequeued/memory\"</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">spider</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dqpop</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">request</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"o\">.</span><span class=\"n\">inc_value</span><span class=\"p\">(</span><span class=\"s2\">\"scheduler/dequeued/disk\"</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">spider</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">request</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"o\">.</span><span class=\"n\">inc_value</span><span class=\"p\">(</span><span class=\"s2\">\"scheduler/dequeued\"</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">spider</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">request</span></div>\n\n<div class=\"viewcode-block\" id=\"Scheduler.__len__\"><a class=\"viewcode-back\" href=\"../../../topics/scheduler.html#scrapy.core.scheduler.Scheduler.__len__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__len__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Return the total amount of enqueued requests</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dqs</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mqs</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dqs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mqs</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_dqpush</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dqs</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dqs</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>  <span class=\"c1\"># non serializable request</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logunser</span><span class=\"p\">:</span>\n                <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"s2\">\"Unable to serialize request: </span><span class=\"si\">%(request)s</span><span class=\"s2\"> - reason:\"</span>\n                    <span class=\"s2\">\" </span><span class=\"si\">%(reason)s</span><span class=\"s2\"> - no more unserializable requests will be\"</span>\n                    <span class=\"s2\">\" logged (stats being collected)\"</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                    <span class=\"n\">msg</span><span class=\"p\">,</span>\n                    <span class=\"p\">{</span><span class=\"s2\">\"request\"</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s2\">\"reason\"</span><span class=\"p\">:</span> <span class=\"n\">e</span><span class=\"p\">},</span>\n                    <span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"spider\"</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">spider</span><span class=\"p\">},</span>\n                <span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logunser</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stats</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"o\">.</span><span class=\"n\">inc_value</span><span class=\"p\">(</span><span class=\"s2\">\"scheduler/unserializable\"</span><span class=\"p\">,</span> <span class=\"n\">spider</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">spider</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_mqpush</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mqs</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_dqpop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Request</span><span class=\"p\">]:</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dqs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dqs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_mq</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\"Create a new priority queue instance, with in-memory storage\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">create_instance</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pqclass</span><span class=\"p\">,</span>\n            <span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">crawler</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">crawler</span><span class=\"p\">,</span>\n            <span class=\"n\">downstream_queue_cls</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mqclass</span><span class=\"p\">,</span>\n            <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_dq</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\"Create a new priority queue instance, with disk storage\"\"\"</span>\n        <span class=\"k\">assert</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dqdir</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_read_dqs_state</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dqdir</span><span class=\"p\">)</span>\n        <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">create_instance</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pqclass</span><span class=\"p\">,</span>\n            <span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">crawler</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">crawler</span><span class=\"p\">,</span>\n            <span class=\"n\">downstream_queue_cls</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dqclass</span><span class=\"p\">,</span>\n            <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dqdir</span><span class=\"p\">,</span>\n            <span class=\"n\">startprios</span><span class=\"o\">=</span><span class=\"n\">state</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">q</span><span class=\"p\">:</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"Resuming crawl (</span><span class=\"si\">%(queuesize)d</span><span class=\"s2\"> requests scheduled)\"</span><span class=\"p\">,</span>\n                <span class=\"p\">{</span><span class=\"s2\">\"queuesize\"</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)},</span>\n                <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"spider\"</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">spider</span><span class=\"p\">},</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">q</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_dqdir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">jobdir</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">\"\"\"Return a folder name to keep disk queue state at\"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"n\">jobdir</span><span class=\"p\">:</span>\n            <span class=\"n\">dqdir</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">jobdir</span><span class=\"p\">,</span> <span class=\"s2\">\"requests.queue\"</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">dqdir</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n                <span class=\"n\">dqdir</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"n\">parents</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">dqdir</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_read_dqs_state</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dqdir</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n        <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">dqdir</span><span class=\"p\">,</span> <span class=\"s2\">\"active.json\"</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n        <span class=\"k\">with</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">\"utf-8\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_write_dqs_state</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dqdir</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">with</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">dqdir</span><span class=\"p\">,</span> <span class=\"s2\">\"active.json\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"w\"</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">\"utf-8\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n            <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span></div>\n</pre>"
    },
    {
      "type": "text",
      "content": "© Copyright Scrapy developers.\n      "
    },
    {
      "type": "code",
      "content": "<code>b84d000c</code>"
    }
  ]
}