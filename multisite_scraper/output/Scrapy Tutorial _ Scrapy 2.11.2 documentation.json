{
  "url": "https://docs.scrapy.org/en/latest/intro/tutorial.html",
  "title": "Scrapy Tutorial — Scrapy 2.11.2 documentation",
  "content": [
    {
      "type": "text",
      "content": "First steps"
    },
    {
      "type": "text",
      "content": "Basic concepts"
    },
    {
      "type": "text",
      "content": "Built-in services"
    },
    {
      "type": "text",
      "content": "Solving specific problems"
    },
    {
      "type": "text",
      "content": "Extending Scrapy"
    },
    {
      "type": "text",
      "content": "All the rest"
    },
    {
      "type": "text",
      "content": "In this tutorial, we’ll assume that Scrapy is already installed on your system.\nIf that’s not the case, see "
    },
    {
      "type": "text",
      "content": "We are going to scrape "
    },
    {
      "type": "text",
      "content": "This tutorial will walk you through these tasks:"
    },
    {
      "type": "text",
      "content": "Creating a new Scrapy project"
    },
    {
      "type": "text",
      "content": "Writing a "
    },
    {
      "type": "text",
      "content": "Exporting the scraped data using the command line"
    },
    {
      "type": "text",
      "content": "Changing spider to recursively follow links"
    },
    {
      "type": "text",
      "content": "Using spider arguments"
    },
    {
      "type": "text",
      "content": "Scrapy is written in "
    },
    {
      "type": "text",
      "content": "If you’re already familiar with other languages, and want to learn Python quickly, the "
    },
    {
      "type": "text",
      "content": "If you’re new to programming and want to start with Python, the following books\nmay be useful to you:"
    },
    {
      "type": "text",
      "content": "Automate the Boring Stuff With Python"
    },
    {
      "type": "text",
      "content": "How To Think Like a Computer Scientist"
    },
    {
      "type": "text",
      "content": "Learn Python 3 The Hard Way"
    },
    {
      "type": "text",
      "content": "You can also take a look at "
    },
    {
      "type": "text",
      "content": "Before you start scraping, you will have to set up a new Scrapy project. Enter a\ndirectory where you’d like to store your code and run:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"n\">scrapy</span> <span class=\"n\">startproject</span> <span class=\"n\">tutorial</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "This will create a "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">tutorial</span></code>"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"n\">tutorial</span><span class=\"o\">/</span>\n    <span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">cfg</span>            <span class=\"c1\"># deploy configuration file</span>\n\n    <span class=\"n\">tutorial</span><span class=\"o\">/</span>             <span class=\"c1\"># project's Python module, you'll import your code from here</span>\n        <span class=\"fm\">__init__</span><span class=\"o\">.</span><span class=\"n\">py</span>\n\n        <span class=\"n\">items</span><span class=\"o\">.</span><span class=\"n\">py</span>          <span class=\"c1\"># project items definition file</span>\n\n        <span class=\"n\">middlewares</span><span class=\"o\">.</span><span class=\"n\">py</span>    <span class=\"c1\"># project middlewares file</span>\n\n        <span class=\"n\">pipelines</span><span class=\"o\">.</span><span class=\"n\">py</span>      <span class=\"c1\"># project pipelines file</span>\n\n        <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">py</span>       <span class=\"c1\"># project settings file</span>\n\n        <span class=\"n\">spiders</span><span class=\"o\">/</span>          <span class=\"c1\"># a directory where you'll later put your spiders</span>\n            <span class=\"fm\">__init__</span><span class=\"o\">.</span><span class=\"n\">py</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "Spiders are classes that you define and that Scrapy uses to scrape information\nfrom a website (or a group of websites). They must subclass\n"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Spider</span></code>"
    },
    {
      "type": "text",
      "content": "This is the code for our first Spider. Save it in a file named\n"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">quotes_spider.py</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">tutorial/spiders</span></code>"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">scrapy</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">QuotesSpider</span><span class=\"p\">(</span><span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">Spider</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"quotes\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">start_requests</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"https://quotes.toscrape.com/page/1/\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"https://quotes.toscrape.com/page/2/\"</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">url</span> <span class=\"ow\">in</span> <span class=\"n\">urls</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">Request</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"n\">page</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"quotes-</span><span class=\"si\">{</span><span class=\"n\">page</span><span class=\"si\">}</span><span class=\"s2\">.html\"</span>\n        <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">write_bytes</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Saved file </span><span class=\"si\">{</span><span class=\"n\">filename</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "As you can see, our Spider subclasses "
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">scrapy.Spider</span></code>"
    },
    {
      "type": "text",
      "content": "name"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">name</span></code>"
    },
    {
      "type": "text",
      "content": "start_requests()"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">start_requests()</span></code>"
    },
    {
      "type": "text",
      "content": "parse()"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">parse()</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TextResponse</span></code>"
    },
    {
      "type": "text",
      "content": "The "
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">parse()</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Request</span></code>"
    },
    {
      "type": "text",
      "content": "To put our spider to work, go to the project’s top level directory and run:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"n\">scrapy</span> <span class=\"n\">crawl</span> <span class=\"n\">quotes</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "This command runs the spider with name "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">quotes</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">quotes.toscrape.com</span></code>"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"o\">...</span> <span class=\"p\">(</span><span class=\"n\">omitted</span> <span class=\"k\">for</span> <span class=\"n\">brevity</span><span class=\"p\">)</span>\n<span class=\"mi\">2016</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">16</span> <span class=\"mi\">21</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">:</span><span class=\"mi\">05</span> <span class=\"p\">[</span><span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"p\">]</span> <span class=\"n\">INFO</span><span class=\"p\">:</span> <span class=\"n\">Spider</span> <span class=\"n\">opened</span>\n<span class=\"mi\">2016</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">16</span> <span class=\"mi\">21</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">:</span><span class=\"mi\">05</span> <span class=\"p\">[</span><span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">extensions</span><span class=\"o\">.</span><span class=\"n\">logstats</span><span class=\"p\">]</span> <span class=\"n\">INFO</span><span class=\"p\">:</span> <span class=\"n\">Crawled</span> <span class=\"mi\">0</span> <span class=\"n\">pages</span> <span class=\"p\">(</span><span class=\"n\">at</span> <span class=\"mi\">0</span> <span class=\"n\">pages</span><span class=\"o\">/</span><span class=\"nb\">min</span><span class=\"p\">),</span> <span class=\"n\">scraped</span> <span class=\"mi\">0</span> <span class=\"n\">items</span> <span class=\"p\">(</span><span class=\"n\">at</span> <span class=\"mi\">0</span> <span class=\"n\">items</span><span class=\"o\">/</span><span class=\"nb\">min</span><span class=\"p\">)</span>\n<span class=\"mi\">2016</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">16</span> <span class=\"mi\">21</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">:</span><span class=\"mi\">05</span> <span class=\"p\">[</span><span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">extensions</span><span class=\"o\">.</span><span class=\"n\">telnet</span><span class=\"p\">]</span> <span class=\"n\">DEBUG</span><span class=\"p\">:</span> <span class=\"n\">Telnet</span> <span class=\"n\">console</span> <span class=\"n\">listening</span> <span class=\"n\">on</span> <span class=\"mf\">127.0.0.1</span><span class=\"p\">:</span><span class=\"mi\">6023</span>\n<span class=\"mi\">2016</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">16</span> <span class=\"mi\">21</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">:</span><span class=\"mi\">05</span> <span class=\"p\">[</span><span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"p\">]</span> <span class=\"n\">DEBUG</span><span class=\"p\">:</span> <span class=\"n\">Crawled</span> <span class=\"p\">(</span><span class=\"mi\">404</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span><span class=\"n\">GET</span> <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">quotes</span><span class=\"o\">.</span><span class=\"n\">toscrape</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">robots</span><span class=\"o\">.</span><span class=\"n\">txt</span><span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"n\">referer</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"mi\">2016</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">16</span> <span class=\"mi\">21</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">:</span><span class=\"mi\">05</span> <span class=\"p\">[</span><span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"p\">]</span> <span class=\"n\">DEBUG</span><span class=\"p\">:</span> <span class=\"n\">Crawled</span> <span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span><span class=\"n\">GET</span> <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">quotes</span><span class=\"o\">.</span><span class=\"n\">toscrape</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">page</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"o\">/&gt;</span> <span class=\"p\">(</span><span class=\"n\">referer</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"mi\">2016</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">16</span> <span class=\"mi\">21</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">:</span><span class=\"mi\">05</span> <span class=\"p\">[</span><span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"p\">]</span> <span class=\"n\">DEBUG</span><span class=\"p\">:</span> <span class=\"n\">Crawled</span> <span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span><span class=\"n\">GET</span> <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">quotes</span><span class=\"o\">.</span><span class=\"n\">toscrape</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">page</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"o\">/&gt;</span> <span class=\"p\">(</span><span class=\"n\">referer</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"mi\">2016</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">16</span> <span class=\"mi\">21</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">:</span><span class=\"mi\">05</span> <span class=\"p\">[</span><span class=\"n\">quotes</span><span class=\"p\">]</span> <span class=\"n\">DEBUG</span><span class=\"p\">:</span> <span class=\"n\">Saved</span> <span class=\"n\">file</span> <span class=\"n\">quotes</span><span class=\"o\">-</span><span class=\"mf\">1.</span><span class=\"n\">html</span>\n<span class=\"mi\">2016</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">16</span> <span class=\"mi\">21</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">:</span><span class=\"mi\">05</span> <span class=\"p\">[</span><span class=\"n\">quotes</span><span class=\"p\">]</span> <span class=\"n\">DEBUG</span><span class=\"p\">:</span> <span class=\"n\">Saved</span> <span class=\"n\">file</span> <span class=\"n\">quotes</span><span class=\"o\">-</span><span class=\"mf\">2.</span><span class=\"n\">html</span>\n<span class=\"mi\">2016</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">16</span> <span class=\"mi\">21</span><span class=\"p\">:</span><span class=\"mi\">24</span><span class=\"p\">:</span><span class=\"mi\">05</span> <span class=\"p\">[</span><span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"p\">]</span> <span class=\"n\">INFO</span><span class=\"p\">:</span> <span class=\"n\">Closing</span> <span class=\"n\">spider</span> <span class=\"p\">(</span><span class=\"n\">finished</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "Now, check the files in the current directory. You should notice that two new\nfiles have been created: "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">parse</span></code>"
    },
    {
      "type": "text",
      "content": "Note"
    },
    {
      "type": "text",
      "content": "If you are wondering why we haven’t parsed the HTML yet, hold\non, we will cover that soon."
    },
    {
      "type": "text",
      "content": "Scrapy schedules the "
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">scrapy.Request</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">start_requests</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Response</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">parse</span></code>"
    },
    {
      "type": "text",
      "content": "Instead of implementing a "
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">start_requests()</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">scrapy.Request</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">start_urls</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">start_requests()</span></code>"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">scrapy</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">QuotesSpider</span><span class=\"p\">(</span><span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">Spider</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"quotes\"</span>\n    <span class=\"n\">start_urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"https://quotes.toscrape.com/page/1/\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"https://quotes.toscrape.com/page/2/\"</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"n\">page</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"quotes-</span><span class=\"si\">{</span><span class=\"n\">page</span><span class=\"si\">}</span><span class=\"s2\">.html\"</span>\n        <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">write_bytes</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">)</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "The "
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">parse()</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">parse()</span></code>"
    },
    {
      "type": "text",
      "content": "The best way to learn how to extract data with Scrapy is trying selectors\nusing the "
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"n\">scrapy</span> <span class=\"n\">shell</span> <span class=\"s1\">'https://quotes.toscrape.com/page/1/'</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "Note"
    },
    {
      "type": "text",
      "content": "Remember to always enclose urls in quotes when running Scrapy shell from\ncommand-line, otherwise urls containing arguments (i.e. "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;</span></code>"
    },
    {
      "type": "text",
      "content": "On Windows, use double quotes instead:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"n\">scrapy</span> <span class=\"n\">shell</span> <span class=\"s2\">\"https://quotes.toscrape.com/page/1/\"</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "You will see something like:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"p\">[</span> <span class=\"o\">...</span> <span class=\"n\">Scrapy</span> <span class=\"n\">log</span> <span class=\"n\">here</span> <span class=\"o\">...</span> <span class=\"p\">]</span>\n<span class=\"mi\">2016</span><span class=\"o\">-</span><span class=\"mi\">09</span><span class=\"o\">-</span><span class=\"mi\">19</span> <span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"mi\">09</span><span class=\"p\">:</span><span class=\"mi\">27</span> <span class=\"p\">[</span><span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"p\">]</span> <span class=\"n\">DEBUG</span><span class=\"p\">:</span> <span class=\"n\">Crawled</span> <span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span><span class=\"n\">GET</span> <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">quotes</span><span class=\"o\">.</span><span class=\"n\">toscrape</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">page</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"o\">/&gt;</span> <span class=\"p\">(</span><span class=\"n\">referer</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span> <span class=\"n\">Available</span> <span class=\"n\">Scrapy</span> <span class=\"n\">objects</span><span class=\"p\">:</span>\n<span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span>   <span class=\"n\">scrapy</span>     <span class=\"n\">scrapy</span> <span class=\"n\">module</span> <span class=\"p\">(</span><span class=\"n\">contains</span> <span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">Selector</span><span class=\"p\">,</span> <span class=\"n\">etc</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span>   <span class=\"n\">crawler</span>    <span class=\"o\">&lt;</span><span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">crawler</span><span class=\"o\">.</span><span class=\"n\">Crawler</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x7fa91d888c90</span><span class=\"o\">&gt;</span>\n<span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span>   <span class=\"n\">item</span>       <span class=\"p\">{}</span>\n<span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span>   <span class=\"n\">request</span>    <span class=\"o\">&lt;</span><span class=\"n\">GET</span> <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">quotes</span><span class=\"o\">.</span><span class=\"n\">toscrape</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">page</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"o\">/&gt;</span>\n<span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span>   <span class=\"n\">response</span>   <span class=\"o\">&lt;</span><span class=\"mi\">200</span> <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">quotes</span><span class=\"o\">.</span><span class=\"n\">toscrape</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">page</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"o\">/&gt;</span>\n<span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span>   <span class=\"n\">settings</span>   <span class=\"o\">&lt;</span><span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">Settings</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x7fa91d888c10</span><span class=\"o\">&gt;</span>\n<span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span>   <span class=\"n\">spider</span>     <span class=\"o\">&lt;</span><span class=\"n\">DefaultSpider</span> <span class=\"s1\">'default'</span> <span class=\"n\">at</span> <span class=\"mh\">0x7fa91c8af990</span><span class=\"o\">&gt;</span>\n<span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span> <span class=\"n\">Useful</span> <span class=\"n\">shortcuts</span><span class=\"p\">:</span>\n<span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span>   <span class=\"n\">shelp</span><span class=\"p\">()</span>           <span class=\"n\">Shell</span> <span class=\"n\">help</span> <span class=\"p\">(</span><span class=\"nb\">print</span> <span class=\"n\">this</span> <span class=\"n\">help</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span>   <span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">req_or_url</span><span class=\"p\">)</span> <span class=\"n\">Fetch</span> <span class=\"n\">request</span> <span class=\"p\">(</span><span class=\"ow\">or</span> <span class=\"n\">URL</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">update</span> <span class=\"n\">local</span> <span class=\"n\">objects</span>\n<span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span>   <span class=\"n\">view</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>    <span class=\"n\">View</span> <span class=\"n\">response</span> <span class=\"ow\">in</span> <span class=\"n\">a</span> <span class=\"n\">browser</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "Using the shell, you can try selecting elements using "
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"title\"</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;Selector query='descendant-or-self::title' data='&lt;title&gt;Quotes to Scrape&lt;/title&gt;'&gt;]</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "The result of running "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">response.css('title')</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SelectorList</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Selector</span></code>"
    },
    {
      "type": "text",
      "content": "To extract the text from the title above, you can do:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"title::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">getall</span><span class=\"p\">()</span>\n<span class=\"go\">['Quotes to Scrape']</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "There are two things to note here: one is that we’ve added "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">::text</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;title&gt;</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">::text</span></code>"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"title\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">getall</span><span class=\"p\">()</span>\n<span class=\"go\">['&lt;title&gt;Quotes to Scrape&lt;/title&gt;']</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "The other thing is that the result of calling "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">.getall()</span></code>"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"title::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"go\">'Quotes to Scrape'</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "As an alternative, you could’ve written:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"title::text\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"go\">'Quotes to Scrape'</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "Accessing an index on a "
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SelectorList</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">IndexError</span></code>"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"noelement\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">IndexError</span>: <span class=\"n\">list index out of range</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "You might want to use "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">.get()</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SelectorList</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"noelement\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "There’s a lesson here: for most scraping code, you want it to be resilient to\nerrors due to things not being found on a page, so that even if some parts fail\nto be scraped, you can at least get "
    },
    {
      "type": "text",
      "content": "Besides the "
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">getall()</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get()</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">re()</span></code>"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"title::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">re</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"Quotes.*\"</span><span class=\"p\">)</span>\n<span class=\"go\">['Quotes to Scrape']</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"title::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">re</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"Q\\w+\"</span><span class=\"p\">)</span>\n<span class=\"go\">['Quotes']</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"title::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">re</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"(\\w+) to (\\w+)\"</span><span class=\"p\">)</span>\n<span class=\"go\">['Quotes', 'Scrape']</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "In order to find the proper CSS selectors to use, you might find it useful to open\nthe response page from the shell in your web browser using "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">view(response)</span></code>"
    },
    {
      "type": "text",
      "content": "Selector Gadget"
    },
    {
      "type": "text",
      "content": "Besides "
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">xpath</span><span class=\"p\">(</span><span class=\"s2\">\"//title\"</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;Selector query='//title' data='&lt;title&gt;Quotes to Scrape&lt;/title&gt;'&gt;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">xpath</span><span class=\"p\">(</span><span class=\"s2\">\"//title/text()\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"go\">'Quotes to Scrape'</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "XPath expressions are very powerful, and are the foundation of Scrapy\nSelectors. In fact, CSS selectors are converted to XPath under-the-hood. You\ncan see that if you read closely the text representation of the selector\nobjects in the shell."
    },
    {
      "type": "text",
      "content": "While perhaps not as popular as CSS selectors, XPath expressions offer more\npower because besides navigating the structure, it can also look at the\ncontent. Using XPath, you’re able to select things like: "
    },
    {
      "type": "text",
      "content": "We won’t cover much of XPath here, but you can read more about "
    },
    {
      "type": "text",
      "content": "Now that you know a bit about selection and extraction, let’s complete our\nspider by writing the code to extract the quotes from the web page."
    },
    {
      "type": "text",
      "content": "Each quote in "
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"quote\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"text\"</span><span class=\"p\">&gt;</span>“The world as we have created it is a process of our\n    thinking. It cannot be changed without changing our thinking.”<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n        by <span class=\"p\">&lt;</span><span class=\"nt\">small</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"author\"</span><span class=\"p\">&gt;</span>Albert Einstein<span class=\"p\">&lt;/</span><span class=\"nt\">small</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"/author/Albert-Einstein\"</span><span class=\"p\">&gt;</span>(about)<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"tags\"</span><span class=\"p\">&gt;</span>\n        Tags:\n        <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"tag\"</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"/tag/change/page/1/\"</span><span class=\"p\">&gt;</span>change<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"tag\"</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"/tag/deep-thoughts/page/1/\"</span><span class=\"p\">&gt;</span>deep-thoughts<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"tag\"</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"/tag/thinking/page/1/\"</span><span class=\"p\">&gt;</span>thinking<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"tag\"</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"/tag/world/page/1/\"</span><span class=\"p\">&gt;</span>world<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "Let’s open up scrapy shell and play a bit to find out how to extract the data\nwe want:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"n\">scrapy</span> <span class=\"n\">shell</span> <span class=\"s1\">'https://quotes.toscrape.com'</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "We get a list of selectors for the quote HTML elements with:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"div.quote\"</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;Selector query=\"descendant-or-self::div[@class and contains(concat(' ', normalize-space(@class), ' '), ' quote ')]\" data='&lt;div class=\"quote\" itemscope itemtype...'&gt;,</span>\n<span class=\"go\">&lt;Selector query=\"descendant-or-self::div[@class and contains(concat(' ', normalize-space(@class), ' '), ' quote ')]\" data='&lt;div class=\"quote\" itemscope itemtype...'&gt;,</span>\n<span class=\"go\">...]</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "Each of the selectors returned by the query above allows us to run further\nqueries over their sub-elements. Let’s assign the first selector to a\nvariable, so that we can run our CSS selectors directly on a particular quote:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">quote</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"div.quote\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "Now, let’s extract "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">text</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">author</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">tags</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">quote</span></code>"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">quote</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"span.text::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">text</span>\n<span class=\"go\">'“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">quote</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"small.author::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">author</span>\n<span class=\"go\">'Albert Einstein'</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "Given that the tags are a list of strings, we can use the "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">.getall()</span></code>"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">quote</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"div.tags a.tag::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">getall</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tags</span>\n<span class=\"go\">['change', 'deep-thoughts', 'thinking', 'world']</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "Having figured out how to extract each bit, we can now iterate over all the\nquotes elements and put them together into a Python dictionary:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">quote</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"div.quote\"</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">quote</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"span.text::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">quote</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"small.author::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">quote</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"div.tags a.tag::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">getall</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">author</span><span class=\"o\">=</span><span class=\"n\">author</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"n\">tags</span><span class=\"p\">))</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">{'text': '“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”', 'author': 'Albert Einstein', 'tags': ['change', 'deep-thoughts', 'thinking', 'world']}</span>\n<span class=\"go\">{'text': '“It is our choices, Harry, that show what we truly are, far more than our abilities.”', 'author': 'J.K. Rowling', 'tags': ['abilities', 'choices']}</span>\n<span class=\"go\">...</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "Let’s get back to our spider. Until now, it doesn’t extract any data in\nparticular, just saves the whole HTML page to a local file. Let’s integrate the\nextraction logic above into our spider."
    },
    {
      "type": "text",
      "content": "A Scrapy spider typically generates many dictionaries containing the data\nextracted from the page. To do that, we use the "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">yield</span></code>"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">scrapy</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">QuotesSpider</span><span class=\"p\">(</span><span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">Spider</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"quotes\"</span>\n    <span class=\"n\">start_urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"https://quotes.toscrape.com/page/1/\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"https://quotes.toscrape.com/page/2/\"</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">quote</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"div.quote\"</span><span class=\"p\">):</span>\n            <span class=\"k\">yield</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"text\"</span><span class=\"p\">:</span> <span class=\"n\">quote</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"span.text::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(),</span>\n                <span class=\"s2\">\"author\"</span><span class=\"p\">:</span> <span class=\"n\">quote</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"small.author::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(),</span>\n                <span class=\"s2\">\"tags\"</span><span class=\"p\">:</span> <span class=\"n\">quote</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"div.tags a.tag::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">getall</span><span class=\"p\">(),</span>\n            <span class=\"p\">}</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "To run this spider, exit the scrapy shell by entering:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"n\">quit</span><span class=\"p\">()</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "Then, run:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"n\">scrapy</span> <span class=\"n\">crawl</span> <span class=\"n\">quotes</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "Now, it should output the extracted data with the log:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"mi\">2016</span><span class=\"o\">-</span><span class=\"mi\">09</span><span class=\"o\">-</span><span class=\"mi\">19</span> <span class=\"mi\">18</span><span class=\"p\">:</span><span class=\"mi\">57</span><span class=\"p\">:</span><span class=\"mi\">19</span> <span class=\"p\">[</span><span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">scraper</span><span class=\"p\">]</span> <span class=\"n\">DEBUG</span><span class=\"p\">:</span> <span class=\"n\">Scraped</span> <span class=\"kn\">from</span> <span class=\"o\">&lt;</span><span class=\"mi\">200</span> <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">quotes</span><span class=\"o\">.</span><span class=\"n\">toscrape</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">page</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"o\">/&gt;</span>\n<span class=\"p\">{</span><span class=\"s1\">'tags'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'life'</span><span class=\"p\">,</span> <span class=\"s1\">'love'</span><span class=\"p\">],</span> <span class=\"s1\">'author'</span><span class=\"p\">:</span> <span class=\"s1\">'André Gide'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'“It is better to be hated for what you are than to be loved for what you are not.”'</span><span class=\"p\">}</span>\n<span class=\"mi\">2016</span><span class=\"o\">-</span><span class=\"mi\">09</span><span class=\"o\">-</span><span class=\"mi\">19</span> <span class=\"mi\">18</span><span class=\"p\">:</span><span class=\"mi\">57</span><span class=\"p\">:</span><span class=\"mi\">19</span> <span class=\"p\">[</span><span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">scraper</span><span class=\"p\">]</span> <span class=\"n\">DEBUG</span><span class=\"p\">:</span> <span class=\"n\">Scraped</span> <span class=\"kn\">from</span> <span class=\"o\">&lt;</span><span class=\"mi\">200</span> <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">quotes</span><span class=\"o\">.</span><span class=\"n\">toscrape</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">page</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"o\">/&gt;</span>\n<span class=\"p\">{</span><span class=\"s1\">'tags'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'edison'</span><span class=\"p\">,</span> <span class=\"s1\">'failure'</span><span class=\"p\">,</span> <span class=\"s1\">'inspirational'</span><span class=\"p\">,</span> <span class=\"s1\">'paraphrased'</span><span class=\"p\">],</span> <span class=\"s1\">'author'</span><span class=\"p\">:</span> <span class=\"s1\">'Thomas A. Edison'</span><span class=\"p\">,</span> <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s2\">\"“I have not failed. I've just found 10,000 ways that won't work.”\"</span><span class=\"p\">}</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "The simplest way to store the scraped data is by using "
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"n\">scrapy</span> <span class=\"n\">crawl</span> <span class=\"n\">quotes</span> <span class=\"o\">-</span><span class=\"n\">O</span> <span class=\"n\">quotes</span><span class=\"o\">.</span><span class=\"n\">json</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "That will generate a "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">quotes.json</span></code>"
    },
    {
      "type": "text",
      "content": "The "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">-O</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">-o</span></code>"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"n\">scrapy</span> <span class=\"n\">crawl</span> <span class=\"n\">quotes</span> <span class=\"o\">-</span><span class=\"n\">o</span> <span class=\"n\">quotes</span><span class=\"o\">.</span><span class=\"n\">jsonl</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "The "
    },
    {
      "type": "text",
      "content": "In small projects (like the one in this tutorial), that should be enough.\nHowever, if you want to perform more complex things with the scraped items, you\ncan write an "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">tutorial/pipelines.py</span></code>"
    },
    {
      "type": "text",
      "content": "Let’s say, instead of just scraping the stuff from the first two pages\nfrom "
    },
    {
      "type": "text",
      "content": "Now that you know how to extract data from pages, let’s see how to follow links\nfrom them."
    },
    {
      "type": "text",
      "content": "First thing is to extract the link to the page we want to follow.  Examining\nour page, we can see there is a link to the next page with the following\nmarkup:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">ul</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"pager\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"next\"</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"/page/2/\"</span><span class=\"p\">&gt;</span>Next <span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">aria-hidden</span><span class=\"o\">=</span><span class=\"s\">\"true\"</span><span class=\"p\">&gt;</span><span class=\"ni\">&amp;rarr;</span><span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "We can try extracting it in the shell:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s1\">'li.next a'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"go\">'&lt;a href=\"/page/2/\"&gt;Next &lt;span aria-hidden=\"true\"&gt;→&lt;/span&gt;&lt;/a&gt;'</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "This gets the anchor element, but we want the attribute "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">href</span></code>"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"li.next a::attr(href)\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"go\">'/page/2/'</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "There is also an "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">attrib</span></code>"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"li.next a\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">attrib</span><span class=\"p\">[</span><span class=\"s2\">\"href\"</span><span class=\"p\">]</span>\n<span class=\"go\">'/page/2/'</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "Let’s see now our spider modified to recursively follow the link to the next\npage, extracting data from it:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">scrapy</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">QuotesSpider</span><span class=\"p\">(</span><span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">Spider</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"quotes\"</span>\n    <span class=\"n\">start_urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"https://quotes.toscrape.com/page/1/\"</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">quote</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"div.quote\"</span><span class=\"p\">):</span>\n            <span class=\"k\">yield</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"text\"</span><span class=\"p\">:</span> <span class=\"n\">quote</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"span.text::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(),</span>\n                <span class=\"s2\">\"author\"</span><span class=\"p\">:</span> <span class=\"n\">quote</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"small.author::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(),</span>\n                <span class=\"s2\">\"tags\"</span><span class=\"p\">:</span> <span class=\"n\">quote</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"div.tags a.tag::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">getall</span><span class=\"p\">(),</span>\n            <span class=\"p\">}</span>\n\n        <span class=\"n\">next_page</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"li.next a::attr(href)\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">next_page</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">next_page</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">urljoin</span><span class=\"p\">(</span><span class=\"n\">next_page</span><span class=\"p\">)</span>\n            <span class=\"k\">yield</span> <span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">Request</span><span class=\"p\">(</span><span class=\"n\">next_page</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">)</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "Now, after extracting the data, the "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">parse()</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">urljoin()</span></code>"
    },
    {
      "type": "text",
      "content": "What you see here is Scrapy’s mechanism of following links: when you yield\na Request in a callback method, Scrapy will schedule that request to be sent\nand register a callback method to be executed when that request finishes."
    },
    {
      "type": "text",
      "content": "Using this, you can build complex crawlers that follow links according to rules\nyou define, and extract different kinds of data depending on the page it’s\nvisiting."
    },
    {
      "type": "text",
      "content": "In our example, it creates a sort of loop, following all the links to the next page\nuntil it doesn’t find one – handy for crawling blogs, forums and other sites with\npagination."
    },
    {
      "type": "text",
      "content": "As a shortcut for creating Request objects you can use\n"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">response.follow</span></code>"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">scrapy</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">QuotesSpider</span><span class=\"p\">(</span><span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">Spider</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"quotes\"</span>\n    <span class=\"n\">start_urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"https://quotes.toscrape.com/page/1/\"</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">quote</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"div.quote\"</span><span class=\"p\">):</span>\n            <span class=\"k\">yield</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"text\"</span><span class=\"p\">:</span> <span class=\"n\">quote</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"span.text::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(),</span>\n                <span class=\"s2\">\"author\"</span><span class=\"p\">:</span> <span class=\"n\">quote</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"span small::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(),</span>\n                <span class=\"s2\">\"tags\"</span><span class=\"p\">:</span> <span class=\"n\">quote</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"div.tags a.tag::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">getall</span><span class=\"p\">(),</span>\n            <span class=\"p\">}</span>\n\n        <span class=\"n\">next_page</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"li.next a::attr(href)\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">next_page</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">follow</span><span class=\"p\">(</span><span class=\"n\">next_page</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">)</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "Unlike scrapy.Request, "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">response.follow</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">response.follow</span></code>"
    },
    {
      "type": "text",
      "content": "You can also pass a selector to "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">response.follow</span></code>"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"k\">for</span> <span class=\"n\">href</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"ul.pager a::attr(href)\"</span><span class=\"p\">):</span>\n    <span class=\"k\">yield</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">follow</span><span class=\"p\">(</span><span class=\"n\">href</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">)</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "For "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;a&gt;</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">response.follow</span></code>"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"ul.pager a\"</span><span class=\"p\">):</span>\n    <span class=\"k\">yield</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">follow</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">)</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "To create multiple requests from an iterable, you can use\n"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">response.follow_all</span></code>"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"n\">anchors</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"ul.pager a\"</span><span class=\"p\">)</span>\n<span class=\"k\">yield from</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">follow_all</span><span class=\"p\">(</span><span class=\"n\">anchors</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">)</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "or, shortening it further:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"k\">yield from</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">follow_all</span><span class=\"p\">(</span><span class=\"n\">css</span><span class=\"o\">=</span><span class=\"s2\">\"ul.pager a\"</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">)</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "Here is another spider that illustrates callbacks and following links,\nthis time for scraping author information:"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">scrapy</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AuthorSpider</span><span class=\"p\">(</span><span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">Spider</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"author\"</span>\n\n    <span class=\"n\">start_urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"https://quotes.toscrape.com/\"</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"n\">author_page_links</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\".author + a\"</span><span class=\"p\">)</span>\n        <span class=\"k\">yield from</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">follow_all</span><span class=\"p\">(</span><span class=\"n\">author_page_links</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse_author</span><span class=\"p\">)</span>\n\n        <span class=\"n\">pagination_links</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"li.next a\"</span><span class=\"p\">)</span>\n        <span class=\"k\">yield from</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">follow_all</span><span class=\"p\">(</span><span class=\"n\">pagination_links</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parse_author</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"nf\">extract_with_css</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n\n        <span class=\"k\">yield</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"n\">extract_with_css</span><span class=\"p\">(</span><span class=\"s2\">\"h3.author-title::text\"</span><span class=\"p\">),</span>\n            <span class=\"s2\">\"birthdate\"</span><span class=\"p\">:</span> <span class=\"n\">extract_with_css</span><span class=\"p\">(</span><span class=\"s2\">\".author-born-date::text\"</span><span class=\"p\">),</span>\n            <span class=\"s2\">\"bio\"</span><span class=\"p\">:</span> <span class=\"n\">extract_with_css</span><span class=\"p\">(</span><span class=\"s2\">\".author-description::text\"</span><span class=\"p\">),</span>\n        <span class=\"p\">}</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "This spider will start from the main page, it will follow all the links to the\nauthors pages calling the "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">parse_author</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">parse</span></code>"
    },
    {
      "type": "text",
      "content": "Here we’re passing callbacks to\n"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">response.follow_all</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Request</span></code>"
    },
    {
      "type": "text",
      "content": "The "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">parse_author</span></code>"
    },
    {
      "type": "text",
      "content": "Another interesting thing this spider demonstrates is that, even if there are\nmany quotes from the same author, we don’t need to worry about visiting the\nsame author page multiple times. By default, Scrapy filters out duplicated\nrequests to URLs already visited, avoiding the problem of hitting servers too\nmuch because of a programming mistake. This can be configured by the setting\n"
    },
    {
      "type": "code",
      "content": "<code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DUPEFILTER_CLASS</span></code>"
    },
    {
      "type": "text",
      "content": "Hopefully by now you have a good understanding of how to use the mechanism\nof following links and callbacks with Scrapy."
    },
    {
      "type": "text",
      "content": "As yet another example spider that leverages the mechanism of following links,\ncheck out the "
    },
    {
      "type": "code",
      "content": "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CrawlSpider</span></code>"
    },
    {
      "type": "text",
      "content": "Also, a common pattern is to build an item with data from more than one page,\nusing a "
    },
    {
      "type": "text",
      "content": "You can provide command line arguments to your spiders by using the "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">-a</span></code>"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"n\">scrapy</span> <span class=\"n\">crawl</span> <span class=\"n\">quotes</span> <span class=\"o\">-</span><span class=\"n\">O</span> <span class=\"n\">quotes</span><span class=\"o\">-</span><span class=\"n\">humor</span><span class=\"o\">.</span><span class=\"n\">json</span> <span class=\"o\">-</span><span class=\"n\">a</span> <span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"n\">humor</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "These arguments are passed to the Spider’s "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>"
    },
    {
      "type": "text",
      "content": "In this example, the value provided for the "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">tag</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">self.tag</span></code>"
    },
    {
      "type": "code",
      "content": "<pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">scrapy</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">QuotesSpider</span><span class=\"p\">(</span><span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">Spider</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"quotes\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">start_requests</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://quotes.toscrape.com/\"</span>\n        <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">\"tag\"</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">tag</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">url</span> <span class=\"o\">+</span> <span class=\"s2\">\"tag/\"</span> <span class=\"o\">+</span> <span class=\"n\">tag</span>\n        <span class=\"k\">yield</span> <span class=\"n\">scrapy</span><span class=\"o\">.</span><span class=\"n\">Request</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">quote</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"div.quote\"</span><span class=\"p\">):</span>\n            <span class=\"k\">yield</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"text\"</span><span class=\"p\">:</span> <span class=\"n\">quote</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"span.text::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(),</span>\n                <span class=\"s2\">\"author\"</span><span class=\"p\">:</span> <span class=\"n\">quote</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"small.author::text\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(),</span>\n            <span class=\"p\">}</span>\n\n        <span class=\"n\">next_page</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">css</span><span class=\"p\">(</span><span class=\"s2\">\"li.next a::attr(href)\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">next_page</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">follow</span><span class=\"p\">(</span><span class=\"n\">next_page</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">)</span>\n</pre>"
    },
    {
      "type": "text",
      "content": "If you pass the "
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">tag=humor</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">humor</span></code>"
    },
    {
      "type": "code",
      "content": "<code class=\"docutils literal notranslate\"><span class=\"pre\">https://quotes.toscrape.com/tag/humor</span></code>"
    },
    {
      "type": "text",
      "content": "You can "
    },
    {
      "type": "text",
      "content": "This tutorial covered only the basics of Scrapy, but there’s a lot of other\nfeatures not mentioned here. Check the "
    },
    {
      "type": "text",
      "content": "You can continue from the section "
    },
    {
      "type": "text",
      "content": "© Copyright Scrapy developers.\n      "
    },
    {
      "type": "code",
      "content": "<code>b84d000c</code>"
    }
  ]
}